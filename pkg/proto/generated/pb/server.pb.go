// SPDX-FileCopyrightText: Â© 2023 OneEyeFPV oneeyefpv@gmail.com
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-License-Identifier: FS-0.9-or-later

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GamepadInputType int32

const (
	GamepadInputType_AXIS   GamepadInputType = 0
	GamepadInputType_BUTTON GamepadInputType = 1
)

// Enum value maps for GamepadInputType.
var (
	GamepadInputType_name = map[int32]string{
		0: "AXIS",
		1: "BUTTON",
	}
	GamepadInputType_value = map[string]int32{
		"AXIS":   0,
		"BUTTON": 1,
	}
)

func (x GamepadInputType) Enum() *GamepadInputType {
	p := new(GamepadInputType)
	*p = x
	return p
}

func (x GamepadInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamepadInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (GamepadInputType) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x GamepadInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamepadInputType.Descriptor instead.
func (GamepadInputType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type PortState int32

const (
	PortState_PortUnknown      PortState = 0
	PortState_PortDisconnected PortState = 1
	PortState_PortConnected    PortState = 2
)

// Enum value maps for PortState.
var (
	PortState_name = map[int32]string{
		0: "PortUnknown",
		1: "PortDisconnected",
		2: "PortConnected",
	}
	PortState_value = map[string]int32{
		"PortUnknown":      0,
		"PortDisconnected": 1,
		"PortConnected":    2,
	}
)

func (x PortState) Enum() *PortState {
	p := new(PortState)
	*p = x
	return p
}

func (x PortState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortState) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[1].Descriptor()
}

func (PortState) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[1]
}

func (x PortState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortState.Descriptor instead.
func (PortState) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

type SupervisorState int32

const (
	SupervisorState_SupervisorUnknown  SupervisorState = 0
	SupervisorState_SupervisorInactive SupervisorState = 1
	SupervisorState_SupervisorActive   SupervisorState = 2
)

// Enum value maps for SupervisorState.
var (
	SupervisorState_name = map[int32]string{
		0: "SupervisorUnknown",
		1: "SupervisorInactive",
		2: "SupervisorActive",
	}
	SupervisorState_value = map[string]int32{
		"SupervisorUnknown":  0,
		"SupervisorInactive": 1,
		"SupervisorActive":   2,
	}
)

func (x SupervisorState) Enum() *SupervisorState {
	p := new(SupervisorState)
	*p = x
	return p
}

func (x SupervisorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupervisorState) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[2].Descriptor()
}

func (SupervisorState) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[2]
}

func (x SupervisorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupervisorState.Descriptor instead.
func (SupervisorState) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

type CRSFDeviceFieldType int32

const (
	CRSFDeviceFieldType_UINT8        CRSFDeviceFieldType = 0
	CRSFDeviceFieldType_INT8         CRSFDeviceFieldType = 1
	CRSFDeviceFieldType_UINT16       CRSFDeviceFieldType = 2
	CRSFDeviceFieldType_INT16        CRSFDeviceFieldType = 3
	CRSFDeviceFieldType_UINT32       CRSFDeviceFieldType = 4
	CRSFDeviceFieldType_INT32        CRSFDeviceFieldType = 5
	CRSFDeviceFieldType_UINT64       CRSFDeviceFieldType = 6
	CRSFDeviceFieldType_INT64        CRSFDeviceFieldType = 7
	CRSFDeviceFieldType_FLOAT        CRSFDeviceFieldType = 8
	CRSFDeviceFieldType_TEXT_SELECT  CRSFDeviceFieldType = 9
	CRSFDeviceFieldType_STRING       CRSFDeviceFieldType = 10
	CRSFDeviceFieldType_FOLDER       CRSFDeviceFieldType = 11
	CRSFDeviceFieldType_INFO         CRSFDeviceFieldType = 12
	CRSFDeviceFieldType_COMMAND      CRSFDeviceFieldType = 13
	CRSFDeviceFieldType_VTX          CRSFDeviceFieldType = 14
	CRSFDeviceFieldType_STATUS       CRSFDeviceFieldType = 46
	CRSFDeviceFieldType_OUT_OF_RANGE CRSFDeviceFieldType = 127
)

// Enum value maps for CRSFDeviceFieldType.
var (
	CRSFDeviceFieldType_name = map[int32]string{
		0:   "UINT8",
		1:   "INT8",
		2:   "UINT16",
		3:   "INT16",
		4:   "UINT32",
		5:   "INT32",
		6:   "UINT64",
		7:   "INT64",
		8:   "FLOAT",
		9:   "TEXT_SELECT",
		10:  "STRING",
		11:  "FOLDER",
		12:  "INFO",
		13:  "COMMAND",
		14:  "VTX",
		46:  "STATUS",
		127: "OUT_OF_RANGE",
	}
	CRSFDeviceFieldType_value = map[string]int32{
		"UINT8":        0,
		"INT8":         1,
		"UINT16":       2,
		"INT16":        3,
		"UINT32":       4,
		"INT32":        5,
		"UINT64":       6,
		"INT64":        7,
		"FLOAT":        8,
		"TEXT_SELECT":  9,
		"STRING":       10,
		"FOLDER":       11,
		"INFO":         12,
		"COMMAND":      13,
		"VTX":          14,
		"STATUS":       46,
		"OUT_OF_RANGE": 127,
	}
)

func (x CRSFDeviceFieldType) Enum() *CRSFDeviceFieldType {
	p := new(CRSFDeviceFieldType)
	*p = x
	return p
}

func (x CRSFDeviceFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRSFDeviceFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[3].Descriptor()
}

func (CRSFDeviceFieldType) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[3]
}

func (x CRSFDeviceFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRSFDeviceFieldType.Descriptor instead.
func (CRSFDeviceFieldType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

type CRSFDeviceFieldCommandStep int32

const (
	CRSFDeviceFieldCommandStep_IDLE        CRSFDeviceFieldCommandStep = 0
	CRSFDeviceFieldCommandStep_CLICK       CRSFDeviceFieldCommandStep = 1
	CRSFDeviceFieldCommandStep_EXECUTING   CRSFDeviceFieldCommandStep = 2
	CRSFDeviceFieldCommandStep_ASK_CONFIRM CRSFDeviceFieldCommandStep = 3
	CRSFDeviceFieldCommandStep_CONFIRMED   CRSFDeviceFieldCommandStep = 4
	CRSFDeviceFieldCommandStep_CANCEL      CRSFDeviceFieldCommandStep = 5
	CRSFDeviceFieldCommandStep_QUERY       CRSFDeviceFieldCommandStep = 6
)

// Enum value maps for CRSFDeviceFieldCommandStep.
var (
	CRSFDeviceFieldCommandStep_name = map[int32]string{
		0: "IDLE",
		1: "CLICK",
		2: "EXECUTING",
		3: "ASK_CONFIRM",
		4: "CONFIRMED",
		5: "CANCEL",
		6: "QUERY",
	}
	CRSFDeviceFieldCommandStep_value = map[string]int32{
		"IDLE":        0,
		"CLICK":       1,
		"EXECUTING":   2,
		"ASK_CONFIRM": 3,
		"CONFIRMED":   4,
		"CANCEL":      5,
		"QUERY":       6,
	}
)

func (x CRSFDeviceFieldCommandStep) Enum() *CRSFDeviceFieldCommandStep {
	p := new(CRSFDeviceFieldCommandStep)
	*p = x
	return p
}

func (x CRSFDeviceFieldCommandStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRSFDeviceFieldCommandStep) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[4].Descriptor()
}

func (CRSFDeviceFieldCommandStep) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[4]
}

func (x CRSFDeviceFieldCommandStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRSFDeviceFieldCommandStep.Descriptor instead.
func (CRSFDeviceFieldCommandStep) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

type LinkStatusFlag int32

const (
	LinkStatusFlag_CONNECTED         LinkStatusFlag = 0
	LinkStatusFlag_STATUS1           LinkStatusFlag = 1
	LinkStatusFlag_MODEL_MATCH       LinkStatusFlag = 2
	LinkStatusFlag_IS_ARMED          LinkStatusFlag = 3
	LinkStatusFlag_WARNING1          LinkStatusFlag = 4
	LinkStatusFlag_ERROR_CONNECTED   LinkStatusFlag = 5
	LinkStatusFlag_ERROR_BAUDRATE    LinkStatusFlag = 6
	LinkStatusFlag_CRITICAL_WARNING2 LinkStatusFlag = 7
)

// Enum value maps for LinkStatusFlag.
var (
	LinkStatusFlag_name = map[int32]string{
		0: "CONNECTED",
		1: "STATUS1",
		2: "MODEL_MATCH",
		3: "IS_ARMED",
		4: "WARNING1",
		5: "ERROR_CONNECTED",
		6: "ERROR_BAUDRATE",
		7: "CRITICAL_WARNING2",
	}
	LinkStatusFlag_value = map[string]int32{
		"CONNECTED":         0,
		"STATUS1":           1,
		"MODEL_MATCH":       2,
		"IS_ARMED":          3,
		"WARNING1":          4,
		"ERROR_CONNECTED":   5,
		"ERROR_BAUDRATE":    6,
		"CRITICAL_WARNING2": 7,
	}
)

func (x LinkStatusFlag) Enum() *LinkStatusFlag {
	p := new(LinkStatusFlag)
	*p = x
	return p
}

func (x LinkStatusFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkStatusFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[5].Descriptor()
}

func (LinkStatusFlag) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[5]
}

func (x LinkStatusFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkStatusFlag.Descriptor instead.
func (LinkStatusFlag) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string             `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Location string             `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Causes   []*ValidationError `protobuf:"bytes,3,rep,name=causes,proto3" json:"causes,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationError) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ValidationError) GetCauses() []*ValidationError {
	if x != nil {
		return x.Causes
	}
	return nil
}

type GetTransmitterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transmitters []*Transmitter `protobuf:"bytes,1,rep,name=transmitters,proto3" json:"transmitters,omitempty"`
}

func (x *GetTransmitterRes) Reset() {
	*x = GetTransmitterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransmitterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransmitterRes) ProtoMessage() {}

func (x *GetTransmitterRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransmitterRes.ProtoReflect.Descriptor instead.
func (*GetTransmitterRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransmitterRes) GetTransmitters() []*Transmitter {
	if x != nil {
		return x.Transmitters
	}
	return nil
}

type Transmitter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Transmitter) Reset() {
	*x = Transmitter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transmitter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transmitter) ProtoMessage() {}

func (x *Transmitter) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transmitter.ProtoReflect.Descriptor instead.
func (*Transmitter) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *Transmitter) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Transmitter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ValidationErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*ValidationError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationErrors) Reset() {
	*x = ValidationErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrors) ProtoMessage() {}

func (x *ValidationErrors) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrors.ProtoReflect.Descriptor instead.
func (*ValidationErrors) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationErrors) GetErrors() []*ValidationError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetGamepadsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamepads []*Gamepad `protobuf:"bytes,1,rep,name=gamepads,proto3" json:"gamepads,omitempty"`
}

func (x *GetGamepadsRes) Reset() {
	*x = GetGamepadsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGamepadsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamepadsRes) ProtoMessage() {}

func (x *GetGamepadsRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamepadsRes.ProtoReflect.Descriptor instead.
func (*GetGamepadsRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *GetGamepadsRes) GetGamepads() []*Gamepad {
	if x != nil {
		return x.Gamepads
	}
	return nil
}

type Gamepad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Axes    int32  `protobuf:"varint,3,opt,name=axes,proto3" json:"axes,omitempty"`
	Buttons int32  `protobuf:"varint,4,opt,name=buttons,proto3" json:"buttons,omitempty"`
	Hats    int32  `protobuf:"varint,5,opt,name=hats,proto3" json:"hats,omitempty"`
}

func (x *Gamepad) Reset() {
	*x = Gamepad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gamepad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gamepad) ProtoMessage() {}

func (x *Gamepad) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gamepad.ProtoReflect.Descriptor instead.
func (*Gamepad) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *Gamepad) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Gamepad) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gamepad) GetAxes() int32 {
	if x != nil {
		return x.Axes
	}
	return 0
}

func (x *Gamepad) GetButtons() int32 {
	if x != nil {
		return x.Buttons
	}
	return 0
}

func (x *Gamepad) GetHats() int32 {
	if x != nil {
		return x.Hats
	}
	return 0
}

type GetConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Struct `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetConfigRes) Reset() {
	*x = GetConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRes) ProtoMessage() {}

func (x *GetConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRes.ProtoReflect.Descriptor instead.
func (*GetConfigRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *GetConfigRes) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Struct `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetConfigReq) Reset() {
	*x = SetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigReq) ProtoMessage() {}

func (x *SetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigReq.ProtoReflect.Descriptor instead.
func (*SetConfigReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *SetConfigReq) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

type ValidateConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors   []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ValidateConfigRes) Reset() {
	*x = ValidateConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigRes) ProtoMessage() {}

func (x *ValidateConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigRes.ProtoReflect.Descriptor instead.
func (*ValidateConfigRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *ValidateConfigRes) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ValidateConfigRes) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type StartLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	BaudRate int32  `protobuf:"varint,2,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`
}

func (x *StartLinkReq) Reset() {
	*x = StartLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLinkReq) ProtoMessage() {}

func (x *StartLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLinkReq.ProtoReflect.Descriptor instead.
func (*StartLinkReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *StartLinkReq) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *StartLinkReq) GetBaudRate() int32 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

type GetGamepadStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamepad *Gamepad `protobuf:"bytes,1,opt,name=gamepad,proto3" json:"gamepad,omitempty"`
}

func (x *GetGamepadStreamReq) Reset() {
	*x = GetGamepadStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGamepadStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamepadStreamReq) ProtoMessage() {}

func (x *GetGamepadStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamepadStreamReq.ProtoReflect.Descriptor instead.
func (*GetGamepadStreamReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *GetGamepadStreamReq) GetGamepad() *Gamepad {
	if x != nil {
		return x.Gamepad
	}
	return nil
}

type GamepadInputState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  GamepadInputType `protobuf:"varint,1,opt,name=type,proto3,enum=JoystickControl.GamepadInputType" json:"type,omitempty"`
	Index int32            `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Value int32            `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GamepadInputState) Reset() {
	*x = GamepadInputState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamepadInputState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamepadInputState) ProtoMessage() {}

func (x *GamepadInputState) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamepadInputState.ProtoReflect.Descriptor instead.
func (*GamepadInputState) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *GamepadInputState) GetType() GamepadInputType {
	if x != nil {
		return x.Type
	}
	return GamepadInputType_AXIS
}

func (x *GamepadInputState) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GamepadInputState) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GamepadInputsStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputsStates []*GamepadInputState `protobuf:"bytes,1,rep,name=inputs_states,json=inputsStates,proto3" json:"inputs_states,omitempty"`
}

func (x *GamepadInputsStates) Reset() {
	*x = GamepadInputsStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamepadInputsStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamepadInputsStates) ProtoMessage() {}

func (x *GamepadInputsStates) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamepadInputsStates.ProtoReflect.Descriptor instead.
func (*GamepadInputsStates) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{13}
}

func (x *GamepadInputsStates) GetInputsStates() []*GamepadInputState {
	if x != nil {
		return x.InputsStates
	}
	return nil
}

type GetTransmitterStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transmitter *Transmitter `protobuf:"bytes,1,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
}

func (x *GetTransmitterStreamReq) Reset() {
	*x = GetTransmitterStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransmitterStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransmitterStreamReq) ProtoMessage() {}

func (x *GetTransmitterStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransmitterStreamReq.ProtoReflect.Descriptor instead.
func (*GetTransmitterStreamReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransmitterStreamReq) GetTransmitter() *Transmitter {
	if x != nil {
		return x.Transmitter
	}
	return nil
}

type TransmitterChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*TransmitterChannel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *TransmitterChannels) Reset() {
	*x = TransmitterChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitterChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitterChannels) ProtoMessage() {}

func (x *TransmitterChannels) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitterChannels.ProtoReflect.Descriptor instead.
func (*TransmitterChannels) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{15}
}

func (x *TransmitterChannels) GetChannels() []*TransmitterChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type TransmitterChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelNumber int32 `protobuf:"varint,1,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	ChannelValue  int32 `protobuf:"varint,2,opt,name=channel_value,json=channelValue,proto3" json:"channel_value,omitempty"`
}

func (x *TransmitterChannel) Reset() {
	*x = TransmitterChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitterChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitterChannel) ProtoMessage() {}

func (x *TransmitterChannel) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitterChannel.ProtoReflect.Descriptor instead.
func (*TransmitterChannel) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{16}
}

func (x *TransmitterChannel) GetChannelNumber() int32 {
	if x != nil {
		return x.ChannelNumber
	}
	return 0
}

func (x *TransmitterChannel) GetChannelValue() int32 {
	if x != nil {
		return x.ChannelValue
	}
	return 0
}

type EvalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNaN bool  `protobuf:"varint,2,opt,name=isNaN,proto3" json:"isNaN,omitempty"`
	Value int32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EvalState) Reset() {
	*x = EvalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalState) ProtoMessage() {}

func (x *EvalState) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalState.ProtoReflect.Descriptor instead.
func (*EvalState) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{17}
}

func (x *EvalState) GetIsNaN() bool {
	if x != nil {
		return x.IsNaN
	}
	return false
}

func (x *EvalState) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EvalStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States map[string]*EvalState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EvalStates) Reset() {
	*x = EvalStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalStates) ProtoMessage() {}

func (x *EvalStates) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalStates.ProtoReflect.Descriptor instead.
func (*EvalStates) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{18}
}

func (x *EvalStates) GetStates() map[string]*EvalState {
	if x != nil {
		return x.States
	}
	return nil
}

type LinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorState      SupervisorState `protobuf:"varint,1,opt,name=supervisor_state,json=supervisorState,proto3,enum=JoystickControl.SupervisorState" json:"supervisor_state,omitempty"`
	PortState            PortState       `protobuf:"varint,2,opt,name=port_state,json=portState,proto3,enum=JoystickControl.PortState" json:"port_state,omitempty"`
	ReceivedPacketsCount uint64          `protobuf:"varint,3,opt,name=received_packets_count,json=receivedPacketsCount,proto3" json:"received_packets_count,omitempty"`
	SentPacketsCount     uint64          `protobuf:"varint,4,opt,name=sent_packets_count,json=sentPacketsCount,proto3" json:"sent_packets_count,omitempty"`
	ErrorPacketsCount    uint64          `protobuf:"varint,5,opt,name=error_packets_count,json=errorPacketsCount,proto3" json:"error_packets_count,omitempty"`
}

func (x *LinkState) Reset() {
	*x = LinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkState) ProtoMessage() {}

func (x *LinkState) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkState.ProtoReflect.Descriptor instead.
func (*LinkState) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{19}
}

func (x *LinkState) GetSupervisorState() SupervisorState {
	if x != nil {
		return x.SupervisorState
	}
	return SupervisorState_SupervisorUnknown
}

func (x *LinkState) GetPortState() PortState {
	if x != nil {
		return x.PortState
	}
	return PortState_PortUnknown
}

func (x *LinkState) GetReceivedPacketsCount() uint64 {
	if x != nil {
		return x.ReceivedPacketsCount
	}
	return 0
}

func (x *LinkState) GetSentPacketsCount() uint64 {
	if x != nil {
		return x.SentPacketsCount
	}
	return 0
}

func (x *LinkState) GetErrorPacketsCount() uint64 {
	if x != nil {
		return x.ErrorPacketsCount
	}
	return 0
}

type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Telemetry_LinkStats
	//	*Telemetry_Attitude
	//	*Telemetry_Battery
	//	*Telemetry_Gps
	//	*Telemetry_FlightMode
	//	*Telemetry_Sync
	//	*Telemetry_LinkTx
	//	*Telemetry_LinkRx
	//	*Telemetry_Barometer
	//	*Telemetry_Variometer
	//	*Telemetry_BarometerVariometer
	//	*Telemetry_DeviceInfo
	//	*Telemetry_DeviceFieldEntry
	//	*Telemetry_DeviceField
	//	*Telemetry_DeviceLinkStatus
	Data isTelemetry_Data `protobuf_oneof:"data"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{20}
}

func (m *Telemetry) GetData() isTelemetry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Telemetry) GetLinkStats() *LinkStatsData {
	if x, ok := x.GetData().(*Telemetry_LinkStats); ok {
		return x.LinkStats
	}
	return nil
}

func (x *Telemetry) GetAttitude() *AttitudeData {
	if x, ok := x.GetData().(*Telemetry_Attitude); ok {
		return x.Attitude
	}
	return nil
}

func (x *Telemetry) GetBattery() *BatteryData {
	if x, ok := x.GetData().(*Telemetry_Battery); ok {
		return x.Battery
	}
	return nil
}

func (x *Telemetry) GetGps() *GPSData {
	if x, ok := x.GetData().(*Telemetry_Gps); ok {
		return x.Gps
	}
	return nil
}

func (x *Telemetry) GetFlightMode() *FlightModeData {
	if x, ok := x.GetData().(*Telemetry_FlightMode); ok {
		return x.FlightMode
	}
	return nil
}

func (x *Telemetry) GetSync() *SyncData {
	if x, ok := x.GetData().(*Telemetry_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *Telemetry) GetLinkTx() *LinkTXData {
	if x, ok := x.GetData().(*Telemetry_LinkTx); ok {
		return x.LinkTx
	}
	return nil
}

func (x *Telemetry) GetLinkRx() *LinkRXData {
	if x, ok := x.GetData().(*Telemetry_LinkRx); ok {
		return x.LinkRx
	}
	return nil
}

func (x *Telemetry) GetBarometer() *BarometerData {
	if x, ok := x.GetData().(*Telemetry_Barometer); ok {
		return x.Barometer
	}
	return nil
}

func (x *Telemetry) GetVariometer() *VariometerData {
	if x, ok := x.GetData().(*Telemetry_Variometer); ok {
		return x.Variometer
	}
	return nil
}

func (x *Telemetry) GetBarometerVariometer() *BarometerVariometerData {
	if x, ok := x.GetData().(*Telemetry_BarometerVariometer); ok {
		return x.BarometerVariometer
	}
	return nil
}

func (x *Telemetry) GetDeviceInfo() *CRSFDeviceInfoData {
	if x, ok := x.GetData().(*Telemetry_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *Telemetry) GetDeviceFieldEntry() *CRSFDeviceFieldEntryData {
	if x, ok := x.GetData().(*Telemetry_DeviceFieldEntry); ok {
		return x.DeviceFieldEntry
	}
	return nil
}

func (x *Telemetry) GetDeviceField() *CRSFDeviceFieldData {
	if x, ok := x.GetData().(*Telemetry_DeviceField); ok {
		return x.DeviceField
	}
	return nil
}

func (x *Telemetry) GetDeviceLinkStatus() *CRSFDeviceLinkStatusData {
	if x, ok := x.GetData().(*Telemetry_DeviceLinkStatus); ok {
		return x.DeviceLinkStatus
	}
	return nil
}

type isTelemetry_Data interface {
	isTelemetry_Data()
}

type Telemetry_LinkStats struct {
	LinkStats *LinkStatsData `protobuf:"bytes,1,opt,name=link_stats,json=linkStats,proto3,oneof"`
}

type Telemetry_Attitude struct {
	Attitude *AttitudeData `protobuf:"bytes,2,opt,name=attitude,proto3,oneof"`
}

type Telemetry_Battery struct {
	Battery *BatteryData `protobuf:"bytes,3,opt,name=battery,proto3,oneof"`
}

type Telemetry_Gps struct {
	Gps *GPSData `protobuf:"bytes,4,opt,name=gps,proto3,oneof"`
}

type Telemetry_FlightMode struct {
	FlightMode *FlightModeData `protobuf:"bytes,5,opt,name=flight_mode,json=flightMode,proto3,oneof"`
}

type Telemetry_Sync struct {
	Sync *SyncData `protobuf:"bytes,6,opt,name=sync,proto3,oneof"`
}

type Telemetry_LinkTx struct {
	LinkTx *LinkTXData `protobuf:"bytes,7,opt,name=link_tx,json=linkTx,proto3,oneof"`
}

type Telemetry_LinkRx struct {
	LinkRx *LinkRXData `protobuf:"bytes,8,opt,name=link_rx,json=linkRx,proto3,oneof"`
}

type Telemetry_Barometer struct {
	Barometer *BarometerData `protobuf:"bytes,9,opt,name=barometer,proto3,oneof"`
}

type Telemetry_Variometer struct {
	Variometer *VariometerData `protobuf:"bytes,10,opt,name=variometer,proto3,oneof"`
}

type Telemetry_BarometerVariometer struct {
	BarometerVariometer *BarometerVariometerData `protobuf:"bytes,11,opt,name=barometer_variometer,json=barometerVariometer,proto3,oneof"`
}

type Telemetry_DeviceInfo struct {
	DeviceInfo *CRSFDeviceInfoData `protobuf:"bytes,12,opt,name=device_info,json=deviceInfo,proto3,oneof"`
}

type Telemetry_DeviceFieldEntry struct {
	DeviceFieldEntry *CRSFDeviceFieldEntryData `protobuf:"bytes,13,opt,name=device_field_entry,json=deviceFieldEntry,proto3,oneof"`
}

type Telemetry_DeviceField struct {
	DeviceField *CRSFDeviceFieldData `protobuf:"bytes,14,opt,name=device_field,json=deviceField,proto3,oneof"`
}

type Telemetry_DeviceLinkStatus struct {
	DeviceLinkStatus *CRSFDeviceLinkStatusData `protobuf:"bytes,15,opt,name=device_link_status,json=deviceLinkStatus,proto3,oneof"`
}

func (*Telemetry_LinkStats) isTelemetry_Data() {}

func (*Telemetry_Attitude) isTelemetry_Data() {}

func (*Telemetry_Battery) isTelemetry_Data() {}

func (*Telemetry_Gps) isTelemetry_Data() {}

func (*Telemetry_FlightMode) isTelemetry_Data() {}

func (*Telemetry_Sync) isTelemetry_Data() {}

func (*Telemetry_LinkTx) isTelemetry_Data() {}

func (*Telemetry_LinkRx) isTelemetry_Data() {}

func (*Telemetry_Barometer) isTelemetry_Data() {}

func (*Telemetry_Variometer) isTelemetry_Data() {}

func (*Telemetry_BarometerVariometer) isTelemetry_Data() {}

func (*Telemetry_DeviceInfo) isTelemetry_Data() {}

func (*Telemetry_DeviceFieldEntry) isTelemetry_Data() {}

func (*Telemetry_DeviceField) isTelemetry_Data() {}

func (*Telemetry_DeviceLinkStatus) isTelemetry_Data() {}

type CRSFDeviceLinkStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadPacketsCount  uint32           `protobuf:"varint,2,opt,name=bad_packets_count,json=badPacketsCount,proto3" json:"bad_packets_count,omitempty"`
	GoodPacketsCount uint32           `protobuf:"varint,1,opt,name=good_packets_count,json=goodPacketsCount,proto3" json:"good_packets_count,omitempty"`
	Flags            []LinkStatusFlag `protobuf:"varint,3,rep,packed,name=flags,proto3,enum=JoystickControl.LinkStatusFlag" json:"flags,omitempty"`
	WarningInfo      string           `protobuf:"bytes,4,opt,name=warning_info,json=warningInfo,proto3" json:"warning_info,omitempty"`
}

func (x *CRSFDeviceLinkStatusData) Reset() {
	*x = CRSFDeviceLinkStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceLinkStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceLinkStatusData) ProtoMessage() {}

func (x *CRSFDeviceLinkStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceLinkStatusData.ProtoReflect.Descriptor instead.
func (*CRSFDeviceLinkStatusData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{21}
}

func (x *CRSFDeviceLinkStatusData) GetBadPacketsCount() uint32 {
	if x != nil {
		return x.BadPacketsCount
	}
	return 0
}

func (x *CRSFDeviceLinkStatusData) GetGoodPacketsCount() uint32 {
	if x != nil {
		return x.GoodPacketsCount
	}
	return 0
}

func (x *CRSFDeviceLinkStatusData) GetFlags() []LinkStatusFlag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *CRSFDeviceLinkStatusData) GetWarningInfo() string {
	if x != nil {
		return x.WarningInfo
	}
	return ""
}

type CRSFDeviceFieldEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChunksRemaining uint32              `protobuf:"varint,2,opt,name=chunks_remaining,json=chunksRemaining,proto3" json:"chunks_remaining,omitempty"`
	ParentId        uint32              `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DataType        CRSFDeviceFieldType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"data_type,omitempty"`
	Buffer          []byte              `protobuf:"bytes,5,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *CRSFDeviceFieldEntryData) Reset() {
	*x = CRSFDeviceFieldEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldEntryData) ProtoMessage() {}

func (x *CRSFDeviceFieldEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldEntryData.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldEntryData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{22}
}

func (x *CRSFDeviceFieldEntryData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldEntryData) GetChunksRemaining() uint32 {
	if x != nil {
		return x.ChunksRemaining
	}
	return 0
}

func (x *CRSFDeviceFieldEntryData) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldEntryData) GetDataType() CRSFDeviceFieldType {
	if x != nil {
		return x.DataType
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldEntryData) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type CRSFDeviceInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber     uint32 `protobuf:"varint,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HardwareVersion  string `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	SoftwareVersion  string `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	FieldCount       uint32 `protobuf:"varint,6,opt,name=field_count,json=fieldCount,proto3" json:"field_count,omitempty"`
	ParameterVersion uint32 `protobuf:"varint,7,opt,name=parameter_version,json=parameterVersion,proto3" json:"parameter_version,omitempty"`
}

func (x *CRSFDeviceInfoData) Reset() {
	*x = CRSFDeviceInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceInfoData) ProtoMessage() {}

func (x *CRSFDeviceInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceInfoData.ProtoReflect.Descriptor instead.
func (*CRSFDeviceInfoData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{23}
}

func (x *CRSFDeviceInfoData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceInfoData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceInfoData) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *CRSFDeviceInfoData) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *CRSFDeviceInfoData) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *CRSFDeviceInfoData) GetFieldCount() uint32 {
	if x != nil {
		return x.FieldCount
	}
	return 0
}

func (x *CRSFDeviceInfoData) GetParameterVersion() uint32 {
	if x != nil {
		return x.ParameterVersion
	}
	return 0
}

type BarometerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Altitude float32 `protobuf:"fixed32,1,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *BarometerData) Reset() {
	*x = BarometerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarometerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarometerData) ProtoMessage() {}

func (x *BarometerData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarometerData.ProtoReflect.Descriptor instead.
func (*BarometerData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{24}
}

func (x *BarometerData) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

type VariometerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerticalSpeed float32 `protobuf:"fixed32,1,opt,name=vertical_speed,json=verticalSpeed,proto3" json:"vertical_speed,omitempty"`
}

func (x *VariometerData) Reset() {
	*x = VariometerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariometerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariometerData) ProtoMessage() {}

func (x *VariometerData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariometerData.ProtoReflect.Descriptor instead.
func (*VariometerData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{25}
}

func (x *VariometerData) GetVerticalSpeed() float32 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

type BarometerVariometerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Altitude      float32 `protobuf:"fixed32,1,opt,name=altitude,proto3" json:"altitude,omitempty"`
	VerticalSpeed float32 `protobuf:"fixed32,2,opt,name=vertical_speed,json=verticalSpeed,proto3" json:"vertical_speed,omitempty"`
}

func (x *BarometerVariometerData) Reset() {
	*x = BarometerVariometerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarometerVariometerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarometerVariometerData) ProtoMessage() {}

func (x *BarometerVariometerData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarometerVariometerData.ProtoReflect.Descriptor instead.
func (*BarometerVariometerData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{26}
}

func (x *BarometerVariometerData) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *BarometerVariometerData) GetVerticalSpeed() float32 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

type FlightModeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *FlightModeData) Reset() {
	*x = FlightModeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightModeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightModeData) ProtoMessage() {}

func (x *FlightModeData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightModeData.ProtoReflect.Descriptor instead.
func (*FlightModeData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{27}
}

func (x *FlightModeData) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type LinkTXData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownlinkRssi uint32 `protobuf:"varint,1,opt,name=downlink_rssi,json=downlinkRssi,proto3" json:"downlink_rssi,omitempty"`
	UplinkPower  uint32 `protobuf:"varint,2,opt,name=uplink_power,json=uplinkPower,proto3" json:"uplink_power,omitempty"`
	UplinkFps    uint32 `protobuf:"varint,3,opt,name=uplink_fps,json=uplinkFps,proto3" json:"uplink_fps,omitempty"`
}

func (x *LinkTXData) Reset() {
	*x = LinkTXData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkTXData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTXData) ProtoMessage() {}

func (x *LinkTXData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTXData.ProtoReflect.Descriptor instead.
func (*LinkTXData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{28}
}

func (x *LinkTXData) GetDownlinkRssi() uint32 {
	if x != nil {
		return x.DownlinkRssi
	}
	return 0
}

func (x *LinkTXData) GetUplinkPower() uint32 {
	if x != nil {
		return x.UplinkPower
	}
	return 0
}

func (x *LinkTXData) GetUplinkFps() uint32 {
	if x != nil {
		return x.UplinkFps
	}
	return 0
}

type LinkRXData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UplinkRssi    uint32 `protobuf:"varint,1,opt,name=uplink_rssi,json=uplinkRssi,proto3" json:"uplink_rssi,omitempty"`
	DownlinkPower uint32 `protobuf:"varint,2,opt,name=downlink_power,json=downlinkPower,proto3" json:"downlink_power,omitempty"`
}

func (x *LinkRXData) Reset() {
	*x = LinkRXData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkRXData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRXData) ProtoMessage() {}

func (x *LinkRXData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRXData.ProtoReflect.Descriptor instead.
func (*LinkRXData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{29}
}

func (x *LinkRXData) GetUplinkRssi() uint32 {
	if x != nil {
		return x.UplinkRssi
	}
	return 0
}

func (x *LinkRXData) GetDownlinkPower() uint32 {
	if x != nil {
		return x.DownlinkPower
	}
	return 0
}

type SyncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate   int32 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SyncData) Reset() {
	*x = SyncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncData) ProtoMessage() {}

func (x *SyncData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncData.ProtoReflect.Descriptor instead.
func (*SyncData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{30}
}

func (x *SyncData) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SyncData) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AttitudeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pitch float32 `protobuf:"fixed32,1,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Roll  float32 `protobuf:"fixed32,2,opt,name=roll,proto3" json:"roll,omitempty"`
	Yaw   float32 `protobuf:"fixed32,3,opt,name=yaw,proto3" json:"yaw,omitempty"`
}

func (x *AttitudeData) Reset() {
	*x = AttitudeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttitudeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudeData) ProtoMessage() {}

func (x *AttitudeData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudeData.ProtoReflect.Descriptor instead.
func (*AttitudeData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{31}
}

func (x *AttitudeData) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *AttitudeData) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *AttitudeData) GetYaw() float32 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

type LinkStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UplinkRssi1         int32  `protobuf:"varint,1,opt,name=uplink_rssi1,json=uplinkRssi1,proto3" json:"uplink_rssi1,omitempty"`
	UplinkRssi2         int32  `protobuf:"varint,2,opt,name=uplink_rssi2,json=uplinkRssi2,proto3" json:"uplink_rssi2,omitempty"`
	UplinkLinkQuality   uint32 `protobuf:"varint,3,opt,name=uplink_link_quality,json=uplinkLinkQuality,proto3" json:"uplink_link_quality,omitempty"`
	UplinkSnr           int32  `protobuf:"varint,4,opt,name=uplink_snr,json=uplinkSnr,proto3" json:"uplink_snr,omitempty"`
	ActiveAntenna       uint32 `protobuf:"varint,5,opt,name=active_antenna,json=activeAntenna,proto3" json:"active_antenna,omitempty"`
	RadioFrequencyMode  uint32 `protobuf:"varint,6,opt,name=radio_frequency_mode,json=radioFrequencyMode,proto3" json:"radio_frequency_mode,omitempty"`
	UplinkPower         uint32 `protobuf:"varint,7,opt,name=uplink_power,json=uplinkPower,proto3" json:"uplink_power,omitempty"`
	DownlinkRssi        int32  `protobuf:"varint,8,opt,name=downlink_rssi,json=downlinkRssi,proto3" json:"downlink_rssi,omitempty"`
	DownlinkLinkQuality uint32 `protobuf:"varint,9,opt,name=downlink_link_quality,json=downlinkLinkQuality,proto3" json:"downlink_link_quality,omitempty"`
	DownlinkSnr         int32  `protobuf:"varint,10,opt,name=downlink_snr,json=downlinkSnr,proto3" json:"downlink_snr,omitempty"`
}

func (x *LinkStatsData) Reset() {
	*x = LinkStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStatsData) ProtoMessage() {}

func (x *LinkStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStatsData.ProtoReflect.Descriptor instead.
func (*LinkStatsData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{32}
}

func (x *LinkStatsData) GetUplinkRssi1() int32 {
	if x != nil {
		return x.UplinkRssi1
	}
	return 0
}

func (x *LinkStatsData) GetUplinkRssi2() int32 {
	if x != nil {
		return x.UplinkRssi2
	}
	return 0
}

func (x *LinkStatsData) GetUplinkLinkQuality() uint32 {
	if x != nil {
		return x.UplinkLinkQuality
	}
	return 0
}

func (x *LinkStatsData) GetUplinkSnr() int32 {
	if x != nil {
		return x.UplinkSnr
	}
	return 0
}

func (x *LinkStatsData) GetActiveAntenna() uint32 {
	if x != nil {
		return x.ActiveAntenna
	}
	return 0
}

func (x *LinkStatsData) GetRadioFrequencyMode() uint32 {
	if x != nil {
		return x.RadioFrequencyMode
	}
	return 0
}

func (x *LinkStatsData) GetUplinkPower() uint32 {
	if x != nil {
		return x.UplinkPower
	}
	return 0
}

func (x *LinkStatsData) GetDownlinkRssi() int32 {
	if x != nil {
		return x.DownlinkRssi
	}
	return 0
}

func (x *LinkStatsData) GetDownlinkLinkQuality() uint32 {
	if x != nil {
		return x.DownlinkLinkQuality
	}
	return 0
}

func (x *LinkStatsData) GetDownlinkSnr() int32 {
	if x != nil {
		return x.DownlinkSnr
	}
	return 0
}

type GPSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude    float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	GroundSpeed float32 `protobuf:"fixed32,3,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
	Heading     float32 `protobuf:"fixed32,4,opt,name=heading,proto3" json:"heading,omitempty"`
	Altitude    int32   `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Satellites  uint32  `protobuf:"varint,6,opt,name=satellites,proto3" json:"satellites,omitempty"`
}

func (x *GPSData) Reset() {
	*x = GPSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSData) ProtoMessage() {}

func (x *GPSData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSData.ProtoReflect.Descriptor instead.
func (*GPSData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{33}
}

func (x *GPSData) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSData) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSData) GetGroundSpeed() float32 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

func (x *GPSData) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GPSData) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GPSData) GetSatellites() uint32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

type BatteryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage   float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current   float32 `protobuf:"fixed32,2,opt,name=current,proto3" json:"current,omitempty"`
	Fuel      float32 `protobuf:"fixed32,3,opt,name=fuel,proto3" json:"fuel,omitempty"`
	Remaining float32 `protobuf:"fixed32,4,opt,name=remaining,proto3" json:"remaining,omitempty"`
}

func (x *BatteryData) Reset() {
	*x = BatteryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryData) ProtoMessage() {}

func (x *BatteryData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryData.ProtoReflect.Descriptor instead.
func (*BatteryData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{34}
}

func (x *BatteryData) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryData) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BatteryData) GetFuel() float32 {
	if x != nil {
		return x.Fuel
	}
	return 0
}

func (x *BatteryData) GetRemaining() float32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

type GetAppInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseTag string `protobuf:"bytes,1,opt,name=release_tag,json=releaseTag,proto3" json:"release_tag,omitempty"`
	CommitHash string `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	BranchName string `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
}

func (x *GetAppInfoRes) Reset() {
	*x = GetAppInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppInfoRes) ProtoMessage() {}

func (x *GetAppInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppInfoRes.ProtoReflect.Descriptor instead.
func (*GetAppInfoRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{35}
}

func (x *GetAppInfoRes) GetReleaseTag() string {
	if x != nil {
		return x.ReleaseTag
	}
	return ""
}

func (x *GetAppInfoRes) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *GetAppInfoRes) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type GetCRSFDevicesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*CRSFDeviceInfoData `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *GetCRSFDevicesRes) Reset() {
	*x = GetCRSFDevicesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDevicesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDevicesRes) ProtoMessage() {}

func (x *GetCRSFDevicesRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDevicesRes.ProtoReflect.Descriptor instead.
func (*GetCRSFDevicesRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{36}
}

func (x *GetCRSFDevicesRes) GetDevices() []*CRSFDeviceInfoData {
	if x != nil {
		return x.Devices
	}
	return nil
}

type GetCRSFDeviceFieldsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*CRSFDeviceFieldData `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetCRSFDeviceFieldsRes) Reset() {
	*x = GetCRSFDeviceFieldsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDeviceFieldsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDeviceFieldsRes) ProtoMessage() {}

func (x *GetCRSFDeviceFieldsRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDeviceFieldsRes.ProtoReflect.Descriptor instead.
func (*GetCRSFDeviceFieldsRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{37}
}

func (x *GetCRSFDeviceFieldsRes) GetFields() []*CRSFDeviceFieldData {
	if x != nil {
		return x.Fields
	}
	return nil
}

type CRSFDeviceFieldData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*CRSFDeviceFieldData_Uint8
	//	*CRSFDeviceFieldData_Int8
	//	*CRSFDeviceFieldData_Uint16
	//	*CRSFDeviceFieldData_Int16
	//	*CRSFDeviceFieldData_Uint32
	//	*CRSFDeviceFieldData_Int32
	//	*CRSFDeviceFieldData_Uint64
	//	*CRSFDeviceFieldData_Int64
	//	*CRSFDeviceFieldData_Float
	//	*CRSFDeviceFieldData_TextSelect
	//	*CRSFDeviceFieldData_String_
	//	*CRSFDeviceFieldData_Folder
	//	*CRSFDeviceFieldData_Info
	//	*CRSFDeviceFieldData_Command
	Data isCRSFDeviceFieldData_Data `protobuf_oneof:"data"`
}

func (x *CRSFDeviceFieldData) Reset() {
	*x = CRSFDeviceFieldData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldData) ProtoMessage() {}

func (x *CRSFDeviceFieldData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldData.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{38}
}

func (m *CRSFDeviceFieldData) GetData() isCRSFDeviceFieldData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetUint8() *CRSFDeviceFieldUint8 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Uint8); ok {
		return x.Uint8
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetInt8() *CRSFDeviceFieldInt8 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Int8); ok {
		return x.Int8
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetUint16() *CRSFDeviceFieldUint16 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Uint16); ok {
		return x.Uint16
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetInt16() *CRSFDeviceFieldInt16 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Int16); ok {
		return x.Int16
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetUint32() *CRSFDeviceFieldUint32 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetInt32() *CRSFDeviceFieldInt32 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetUint64() *CRSFDeviceFieldUint64 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetInt64() *CRSFDeviceFieldInt64 {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetFloat() *CRSFDeviceFieldFloat {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Float); ok {
		return x.Float
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetTextSelect() *CRSFDeviceFieldTextSelect {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_TextSelect); ok {
		return x.TextSelect
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetString_() *CRSFDeviceFieldString {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_String_); ok {
		return x.String_
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetFolder() *CRSFDeviceFieldFolder {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Folder); ok {
		return x.Folder
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetInfo() *CRSFDeviceFieldInfo {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CRSFDeviceFieldData) GetCommand() *CRSFDeviceFieldCommand {
	if x, ok := x.GetData().(*CRSFDeviceFieldData_Command); ok {
		return x.Command
	}
	return nil
}

type isCRSFDeviceFieldData_Data interface {
	isCRSFDeviceFieldData_Data()
}

type CRSFDeviceFieldData_Uint8 struct {
	Uint8 *CRSFDeviceFieldUint8 `protobuf:"bytes,1,opt,name=uint8,proto3,oneof"`
}

type CRSFDeviceFieldData_Int8 struct {
	Int8 *CRSFDeviceFieldInt8 `protobuf:"bytes,2,opt,name=int8,proto3,oneof"`
}

type CRSFDeviceFieldData_Uint16 struct {
	Uint16 *CRSFDeviceFieldUint16 `protobuf:"bytes,3,opt,name=uint16,proto3,oneof"`
}

type CRSFDeviceFieldData_Int16 struct {
	Int16 *CRSFDeviceFieldInt16 `protobuf:"bytes,4,opt,name=int16,proto3,oneof"`
}

type CRSFDeviceFieldData_Uint32 struct {
	Uint32 *CRSFDeviceFieldUint32 `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"` // not used by ELRS <= 3.3.0
}

type CRSFDeviceFieldData_Int32 struct {
	Int32 *CRSFDeviceFieldInt32 `protobuf:"bytes,6,opt,name=int32,proto3,oneof"` // not used by ELRS <= 3.3.0
}

type CRSFDeviceFieldData_Uint64 struct {
	Uint64 *CRSFDeviceFieldUint64 `protobuf:"bytes,7,opt,name=uint64,proto3,oneof"` // not used by ELRS <= 3.3.0
}

type CRSFDeviceFieldData_Int64 struct {
	Int64 *CRSFDeviceFieldInt64 `protobuf:"bytes,8,opt,name=int64,proto3,oneof"` // not used by ELRS <= 3.3.0
}

type CRSFDeviceFieldData_Float struct {
	Float *CRSFDeviceFieldFloat `protobuf:"bytes,9,opt,name=float,proto3,oneof"` // not used by ELRS <= 3.3.0
}

type CRSFDeviceFieldData_TextSelect struct {
	TextSelect *CRSFDeviceFieldTextSelect `protobuf:"bytes,10,opt,name=text_select,json=textSelect,proto3,oneof"`
}

type CRSFDeviceFieldData_String_ struct {
	String_ *CRSFDeviceFieldString `protobuf:"bytes,11,opt,name=string,proto3,oneof"`
}

type CRSFDeviceFieldData_Folder struct {
	Folder *CRSFDeviceFieldFolder `protobuf:"bytes,12,opt,name=folder,proto3,oneof"`
}

type CRSFDeviceFieldData_Info struct {
	Info *CRSFDeviceFieldInfo `protobuf:"bytes,13,opt,name=info,proto3,oneof"`
}

type CRSFDeviceFieldData_Command struct {
	Command *CRSFDeviceFieldCommand `protobuf:"bytes,14,opt,name=command,proto3,oneof"`
}

func (*CRSFDeviceFieldData_Uint8) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Int8) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Uint16) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Int16) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Uint32) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Int32) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Uint64) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Int64) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Float) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_TextSelect) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_String_) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Folder) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Info) isCRSFDeviceFieldData_Data() {}

func (*CRSFDeviceFieldData_Command) isCRSFDeviceFieldData_Data() {}

type CRSFDeviceFieldUint8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    uint32              `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      uint32              `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      uint32              `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  uint32              `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldUint8) Reset() {
	*x = CRSFDeviceFieldUint8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldUint8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldUint8) ProtoMessage() {}

func (x *CRSFDeviceFieldUint8) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldUint8.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldUint8) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{39}
}

func (x *CRSFDeviceFieldUint8) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldUint8) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldUint8) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldUint8) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldInt8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    int32               `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      int32               `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      int32               `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  int32               `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldInt8) Reset() {
	*x = CRSFDeviceFieldInt8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldInt8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldInt8) ProtoMessage() {}

func (x *CRSFDeviceFieldInt8) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldInt8.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldInt8) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{40}
}

func (x *CRSFDeviceFieldInt8) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldInt8) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldInt8) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldInt8) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldUint16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    uint32              `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      uint32              `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      uint32              `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  uint32              `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldUint16) Reset() {
	*x = CRSFDeviceFieldUint16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldUint16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldUint16) ProtoMessage() {}

func (x *CRSFDeviceFieldUint16) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldUint16.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldUint16) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{41}
}

func (x *CRSFDeviceFieldUint16) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldUint16) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldUint16) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldUint16) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldInt16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    int32               `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      int32               `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      int32               `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  int32               `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldInt16) Reset() {
	*x = CRSFDeviceFieldInt16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldInt16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldInt16) ProtoMessage() {}

func (x *CRSFDeviceFieldInt16) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldInt16.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldInt16) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{42}
}

func (x *CRSFDeviceFieldInt16) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldInt16) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldInt16) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldInt16) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldUint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    uint32              `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      uint32              `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      uint32              `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  uint32              `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldUint32) Reset() {
	*x = CRSFDeviceFieldUint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldUint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldUint32) ProtoMessage() {}

func (x *CRSFDeviceFieldUint32) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldUint32.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldUint32) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{43}
}

func (x *CRSFDeviceFieldUint32) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldUint32) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldUint32) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldUint32) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    int32               `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      int32               `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      int32               `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  int32               `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldInt32) Reset() {
	*x = CRSFDeviceFieldInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldInt32) ProtoMessage() {}

func (x *CRSFDeviceFieldInt32) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldInt32.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldInt32) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{44}
}

func (x *CRSFDeviceFieldInt32) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldInt32) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldInt32) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldInt32) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldUint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    uint64              `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      uint64              `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      uint64              `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  uint64              `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldUint64) Reset() {
	*x = CRSFDeviceFieldUint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldUint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldUint64) ProtoMessage() {}

func (x *CRSFDeviceFieldUint64) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldUint64.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldUint64) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{45}
}

func (x *CRSFDeviceFieldUint64) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldUint64) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldUint64) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetDefault() uint64 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldUint64) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    int64               `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      int64               `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      int64               `protobuf:"varint,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  int64               `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldInt64) Reset() {
	*x = CRSFDeviceFieldInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldInt64) ProtoMessage() {}

func (x *CRSFDeviceFieldInt64) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldInt64.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldInt64) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{46}
}

func (x *CRSFDeviceFieldInt64) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldInt64) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldInt64) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetDefault() int64 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldInt64) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    float32             `protobuf:"fixed32,5,opt,name=value,proto3" json:"value,omitempty"`
	Min      float32             `protobuf:"fixed32,6,opt,name=min,proto3" json:"min,omitempty"`
	Max      float32             `protobuf:"fixed32,7,opt,name=max,proto3" json:"max,omitempty"`
	Default  float32             `protobuf:"fixed32,8,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,9,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldFloat) Reset() {
	*x = CRSFDeviceFieldFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldFloat) ProtoMessage() {}

func (x *CRSFDeviceFieldFloat) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldFloat.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldFloat) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{47}
}

func (x *CRSFDeviceFieldFloat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldFloat) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldFloat) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetDefault() float32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldFloat) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type CRSFDeviceFieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    string              `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CRSFDeviceFieldInfo) Reset() {
	*x = CRSFDeviceFieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldInfo) ProtoMessage() {}

func (x *CRSFDeviceFieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldInfo.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{48}
}

func (x *CRSFDeviceFieldInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldInfo) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldInfo) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CRSFDeviceFieldString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Value    string              `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CRSFDeviceFieldString) Reset() {
	*x = CRSFDeviceFieldString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldString) ProtoMessage() {}

func (x *CRSFDeviceFieldString) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldString.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldString) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{49}
}

func (x *CRSFDeviceFieldString) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldString) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldString) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldString) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CRSFDeviceFieldFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *CRSFDeviceFieldFolder) Reset() {
	*x = CRSFDeviceFieldFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldFolder) ProtoMessage() {}

func (x *CRSFDeviceFieldFolder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldFolder.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldFolder) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{50}
}

func (x *CRSFDeviceFieldFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldFolder) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldFolder) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldFolder) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type CRSFDeviceFieldCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType        `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32                     `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32                     `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Step     CRSFDeviceFieldCommandStep `protobuf:"varint,5,opt,name=step,proto3,enum=JoystickControl.CRSFDeviceFieldCommandStep" json:"step,omitempty"`
	Timeout  uint32                     `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Message  string                     `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CRSFDeviceFieldCommand) Reset() {
	*x = CRSFDeviceFieldCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldCommand) ProtoMessage() {}

func (x *CRSFDeviceFieldCommand) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldCommand.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldCommand) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{51}
}

func (x *CRSFDeviceFieldCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldCommand) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldCommand) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldCommand) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldCommand) GetStep() CRSFDeviceFieldCommandStep {
	if x != nil {
		return x.Step
	}
	return CRSFDeviceFieldCommandStep_IDLE
}

func (x *CRSFDeviceFieldCommand) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CRSFDeviceFieldCommand) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CRSFDeviceFieldTextSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     CRSFDeviceFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=JoystickControl.CRSFDeviceFieldType" json:"type,omitempty"`
	Id       uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId uint32              `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Options  []string            `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	Value    uint32              `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
	Min      uint32              `protobuf:"varint,7,opt,name=min,proto3" json:"min,omitempty"`
	Max      uint32              `protobuf:"varint,8,opt,name=max,proto3" json:"max,omitempty"`
	Default  uint32              `protobuf:"varint,9,opt,name=default,proto3" json:"default,omitempty"`
	Units    string              `protobuf:"bytes,10,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *CRSFDeviceFieldTextSelect) Reset() {
	*x = CRSFDeviceFieldTextSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRSFDeviceFieldTextSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRSFDeviceFieldTextSelect) ProtoMessage() {}

func (x *CRSFDeviceFieldTextSelect) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRSFDeviceFieldTextSelect.ProtoReflect.Descriptor instead.
func (*CRSFDeviceFieldTextSelect) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{52}
}

func (x *CRSFDeviceFieldTextSelect) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CRSFDeviceFieldTextSelect) GetType() CRSFDeviceFieldType {
	if x != nil {
		return x.Type
	}
	return CRSFDeviceFieldType_UINT8
}

func (x *CRSFDeviceFieldTextSelect) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CRSFDeviceFieldTextSelect) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CRSFDeviceFieldTextSelect) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type GetCRSFDeviceFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *CRSFDeviceInfoData `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	FieldId uint32              `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
}

func (x *GetCRSFDeviceFieldReq) Reset() {
	*x = GetCRSFDeviceFieldReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDeviceFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDeviceFieldReq) ProtoMessage() {}

func (x *GetCRSFDeviceFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDeviceFieldReq.ProtoReflect.Descriptor instead.
func (*GetCRSFDeviceFieldReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{53}
}

func (x *GetCRSFDeviceFieldReq) GetDevice() *CRSFDeviceInfoData {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetCRSFDeviceFieldReq) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type GetCRSFDeviceFieldsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *CRSFDeviceInfoData `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetCRSFDeviceFieldsReq) Reset() {
	*x = GetCRSFDeviceFieldsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDeviceFieldsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDeviceFieldsReq) ProtoMessage() {}

func (x *GetCRSFDeviceFieldsReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDeviceFieldsReq.ProtoReflect.Descriptor instead.
func (*GetCRSFDeviceFieldsReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{54}
}

func (x *GetCRSFDeviceFieldsReq) GetDevice() *CRSFDeviceInfoData {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetCRSFDeviceFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *CRSFDeviceFieldData `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *GetCRSFDeviceFieldRes) Reset() {
	*x = GetCRSFDeviceFieldRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDeviceFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDeviceFieldRes) ProtoMessage() {}

func (x *GetCRSFDeviceFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDeviceFieldRes.ProtoReflect.Descriptor instead.
func (*GetCRSFDeviceFieldRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{55}
}

func (x *GetCRSFDeviceFieldRes) GetField() *CRSFDeviceFieldData {
	if x != nil {
		return x.Field
	}
	return nil
}

type SetCRSFDeviceFieldReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *CRSFDeviceInfoData  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Field  *CRSFDeviceFieldData `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *SetCRSFDeviceFieldReq) Reset() {
	*x = SetCRSFDeviceFieldReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCRSFDeviceFieldReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCRSFDeviceFieldReq) ProtoMessage() {}

func (x *SetCRSFDeviceFieldReq) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCRSFDeviceFieldReq.ProtoReflect.Descriptor instead.
func (*SetCRSFDeviceFieldReq) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{56}
}

func (x *SetCRSFDeviceFieldReq) GetDevice() *CRSFDeviceInfoData {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetCRSFDeviceFieldReq) GetField() *CRSFDeviceFieldData {
	if x != nil {
		return x.Field
	}
	return nil
}

type SetCRSFDeviceFieldRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *CRSFDeviceFieldData `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *SetCRSFDeviceFieldRes) Reset() {
	*x = SetCRSFDeviceFieldRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCRSFDeviceFieldRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCRSFDeviceFieldRes) ProtoMessage() {}

func (x *SetCRSFDeviceFieldRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCRSFDeviceFieldRes.ProtoReflect.Descriptor instead.
func (*SetCRSFDeviceFieldRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{57}
}

func (x *SetCRSFDeviceFieldRes) GetField() *CRSFDeviceFieldData {
	if x != nil {
		return x.Field
	}
	return nil
}

type GetCRSFDeviceLinkStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkStatus *CRSFDeviceLinkStatusData `protobuf:"bytes,1,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`
}

func (x *GetCRSFDeviceLinkStatusRes) Reset() {
	*x = GetCRSFDeviceLinkStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCRSFDeviceLinkStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCRSFDeviceLinkStatusRes) ProtoMessage() {}

func (x *GetCRSFDeviceLinkStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCRSFDeviceLinkStatusRes.ProtoReflect.Descriptor instead.
func (*GetCRSFDeviceLinkStatusRes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{58}
}

func (x *GetCRSFDeviceLinkStatusRes) GetLinkStatus() *CRSFDeviceLinkStatusData {
	if x != nil {
		return x.LinkStatus
	}
	return nil
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x06, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x35, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73, 0x22, 0x6f,
	0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x78, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x74, 0x73, 0x22,
	0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x47, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x22, 0x76, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5e,
	0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x59,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x61, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x61, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x0a, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4a, 0x6f,
	0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4a, 0x6f,
	0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x08,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x41, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x47, 0x50, 0x53, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x67, 0x70,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x58,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x78, 0x12, 0x36,
	0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x58, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x76,
	0x61, 0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x14, 0x62, 0x61, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x13, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x59, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x52,
	0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x67, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b,
	0x0a, 0x0d, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x56,
	0x61, 0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x22, 0x24, 0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x58, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x73, 0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x70, 0x73, 0x22, 0x54, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x58, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x73, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x41,
	0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x22, 0x9c, 0x03, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x73, 0x73, 0x69, 0x31, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x73, 0x73, 0x69, 0x32, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x6e, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x6e, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x53, 0x6e, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x47, 0x50, 0x53, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x72, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xae, 0x07, 0x0a, 0x13, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x38, 0x48, 0x00, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x74,
	0x38, 0x12, 0x3a, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x74, 0x38, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x40, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55,
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12,
	0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x40,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x40, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x3d, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x4d, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x43,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a, 0x14,
	0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55,
	0x69, 0x6e, 0x74, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x43, 0x52,
	0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74,
	0x38, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x43, 0x52, 0x53, 0x46, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x22, 0xfc, 0x01, 0x0a, 0x15, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22,
	0xfb, 0x01, 0x0a, 0x14, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53,
	0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xfb, 0x01,
	0x0a, 0x14, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x13,
	0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x15, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f,
	0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52,
	0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x9a, 0x02, 0x0a, 0x19, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x55, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x53, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x28, 0x0a, 0x10, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x58, 0x49, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x54,
	0x54, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x45, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x0f,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x02, 0x2a, 0xe1, 0x01, 0x0a, 0x13, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54,
	0x33, 0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x0d, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x54, 0x58, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x7f, 0x2a, 0x77, 0x0a, 0x1a, 0x43, 0x52, 0x53, 0x46,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x06, 0x2a, 0x99, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x31, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x41, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x31, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x55, 0x44,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x32, 0x10, 0x07, 0x32, 0xc3, 0x0d,
	0x0a, 0x0f, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73,
	0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1d, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x22, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x48, 0x54, 0x54, 0x50, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x14, 0x67, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x28, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x4a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x27, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x52,
	0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x73,
	0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x52, 0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x52, 0x53, 0x46,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x52,
	0x53, 0x46, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1e, 0x2e, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x61, 0x61, 0x63, 0x6b, 0x2f, 0x65, 0x6c, 0x72, 0x73, 0x2d, 0x6a, 0x6f, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_server_proto_goTypes = []interface{}{
	(GamepadInputType)(0),              // 0: JoystickControl.GamepadInputType
	(PortState)(0),                     // 1: JoystickControl.PortState
	(SupervisorState)(0),               // 2: JoystickControl.SupervisorState
	(CRSFDeviceFieldType)(0),           // 3: JoystickControl.CRSFDeviceFieldType
	(CRSFDeviceFieldCommandStep)(0),    // 4: JoystickControl.CRSFDeviceFieldCommandStep
	(LinkStatusFlag)(0),                // 5: JoystickControl.LinkStatusFlag
	(*Empty)(nil),                      // 6: JoystickControl.Empty
	(*ValidationError)(nil),            // 7: JoystickControl.ValidationError
	(*GetTransmitterRes)(nil),          // 8: JoystickControl.GetTransmitterRes
	(*Transmitter)(nil),                // 9: JoystickControl.Transmitter
	(*ValidationErrors)(nil),           // 10: JoystickControl.ValidationErrors
	(*GetGamepadsRes)(nil),             // 11: JoystickControl.GetGamepadsRes
	(*Gamepad)(nil),                    // 12: JoystickControl.Gamepad
	(*GetConfigRes)(nil),               // 13: JoystickControl.GetConfigRes
	(*SetConfigReq)(nil),               // 14: JoystickControl.SetConfigReq
	(*ValidateConfigRes)(nil),          // 15: JoystickControl.ValidateConfigRes
	(*StartLinkReq)(nil),               // 16: JoystickControl.StartLinkReq
	(*GetGamepadStreamReq)(nil),        // 17: JoystickControl.GetGamepadStreamReq
	(*GamepadInputState)(nil),          // 18: JoystickControl.GamepadInputState
	(*GamepadInputsStates)(nil),        // 19: JoystickControl.GamepadInputsStates
	(*GetTransmitterStreamReq)(nil),    // 20: JoystickControl.GetTransmitterStreamReq
	(*TransmitterChannels)(nil),        // 21: JoystickControl.TransmitterChannels
	(*TransmitterChannel)(nil),         // 22: JoystickControl.TransmitterChannel
	(*EvalState)(nil),                  // 23: JoystickControl.EvalState
	(*EvalStates)(nil),                 // 24: JoystickControl.EvalStates
	(*LinkState)(nil),                  // 25: JoystickControl.LinkState
	(*Telemetry)(nil),                  // 26: JoystickControl.Telemetry
	(*CRSFDeviceLinkStatusData)(nil),   // 27: JoystickControl.CRSFDeviceLinkStatusData
	(*CRSFDeviceFieldEntryData)(nil),   // 28: JoystickControl.CRSFDeviceFieldEntryData
	(*CRSFDeviceInfoData)(nil),         // 29: JoystickControl.CRSFDeviceInfoData
	(*BarometerData)(nil),              // 30: JoystickControl.BarometerData
	(*VariometerData)(nil),             // 31: JoystickControl.VariometerData
	(*BarometerVariometerData)(nil),    // 32: JoystickControl.BarometerVariometerData
	(*FlightModeData)(nil),             // 33: JoystickControl.FlightModeData
	(*LinkTXData)(nil),                 // 34: JoystickControl.LinkTXData
	(*LinkRXData)(nil),                 // 35: JoystickControl.LinkRXData
	(*SyncData)(nil),                   // 36: JoystickControl.SyncData
	(*AttitudeData)(nil),               // 37: JoystickControl.AttitudeData
	(*LinkStatsData)(nil),              // 38: JoystickControl.LinkStatsData
	(*GPSData)(nil),                    // 39: JoystickControl.GPSData
	(*BatteryData)(nil),                // 40: JoystickControl.BatteryData
	(*GetAppInfoRes)(nil),              // 41: JoystickControl.GetAppInfoRes
	(*GetCRSFDevicesRes)(nil),          // 42: JoystickControl.GetCRSFDevicesRes
	(*GetCRSFDeviceFieldsRes)(nil),     // 43: JoystickControl.GetCRSFDeviceFieldsRes
	(*CRSFDeviceFieldData)(nil),        // 44: JoystickControl.CRSFDeviceFieldData
	(*CRSFDeviceFieldUint8)(nil),       // 45: JoystickControl.CRSFDeviceFieldUint8
	(*CRSFDeviceFieldInt8)(nil),        // 46: JoystickControl.CRSFDeviceFieldInt8
	(*CRSFDeviceFieldUint16)(nil),      // 47: JoystickControl.CRSFDeviceFieldUint16
	(*CRSFDeviceFieldInt16)(nil),       // 48: JoystickControl.CRSFDeviceFieldInt16
	(*CRSFDeviceFieldUint32)(nil),      // 49: JoystickControl.CRSFDeviceFieldUint32
	(*CRSFDeviceFieldInt32)(nil),       // 50: JoystickControl.CRSFDeviceFieldInt32
	(*CRSFDeviceFieldUint64)(nil),      // 51: JoystickControl.CRSFDeviceFieldUint64
	(*CRSFDeviceFieldInt64)(nil),       // 52: JoystickControl.CRSFDeviceFieldInt64
	(*CRSFDeviceFieldFloat)(nil),       // 53: JoystickControl.CRSFDeviceFieldFloat
	(*CRSFDeviceFieldInfo)(nil),        // 54: JoystickControl.CRSFDeviceFieldInfo
	(*CRSFDeviceFieldString)(nil),      // 55: JoystickControl.CRSFDeviceFieldString
	(*CRSFDeviceFieldFolder)(nil),      // 56: JoystickControl.CRSFDeviceFieldFolder
	(*CRSFDeviceFieldCommand)(nil),     // 57: JoystickControl.CRSFDeviceFieldCommand
	(*CRSFDeviceFieldTextSelect)(nil),  // 58: JoystickControl.CRSFDeviceFieldTextSelect
	(*GetCRSFDeviceFieldReq)(nil),      // 59: JoystickControl.GetCRSFDeviceFieldReq
	(*GetCRSFDeviceFieldsReq)(nil),     // 60: JoystickControl.GetCRSFDeviceFieldsReq
	(*GetCRSFDeviceFieldRes)(nil),      // 61: JoystickControl.GetCRSFDeviceFieldRes
	(*SetCRSFDeviceFieldReq)(nil),      // 62: JoystickControl.SetCRSFDeviceFieldReq
	(*SetCRSFDeviceFieldRes)(nil),      // 63: JoystickControl.SetCRSFDeviceFieldRes
	(*GetCRSFDeviceLinkStatusRes)(nil), // 64: JoystickControl.GetCRSFDeviceLinkStatusRes
	nil,                                // 65: JoystickControl.EvalStates.StatesEntry
	(*structpb.Struct)(nil),            // 66: google.protobuf.Struct
}
var file_server_proto_depIdxs = []int32{
	7,  // 0: JoystickControl.ValidationError.causes:type_name -> JoystickControl.ValidationError
	9,  // 1: JoystickControl.GetTransmitterRes.transmitters:type_name -> JoystickControl.Transmitter
	7,  // 2: JoystickControl.ValidationErrors.errors:type_name -> JoystickControl.ValidationError
	12, // 3: JoystickControl.GetGamepadsRes.gamepads:type_name -> JoystickControl.Gamepad
	66, // 4: JoystickControl.GetConfigRes.config:type_name -> google.protobuf.Struct
	66, // 5: JoystickControl.SetConfigReq.config:type_name -> google.protobuf.Struct
	12, // 6: JoystickControl.GetGamepadStreamReq.gamepad:type_name -> JoystickControl.Gamepad
	0,  // 7: JoystickControl.GamepadInputState.type:type_name -> JoystickControl.GamepadInputType
	18, // 8: JoystickControl.GamepadInputsStates.inputs_states:type_name -> JoystickControl.GamepadInputState
	9,  // 9: JoystickControl.GetTransmitterStreamReq.transmitter:type_name -> JoystickControl.Transmitter
	22, // 10: JoystickControl.TransmitterChannels.channels:type_name -> JoystickControl.TransmitterChannel
	65, // 11: JoystickControl.EvalStates.states:type_name -> JoystickControl.EvalStates.StatesEntry
	2,  // 12: JoystickControl.LinkState.supervisor_state:type_name -> JoystickControl.SupervisorState
	1,  // 13: JoystickControl.LinkState.port_state:type_name -> JoystickControl.PortState
	38, // 14: JoystickControl.Telemetry.link_stats:type_name -> JoystickControl.LinkStatsData
	37, // 15: JoystickControl.Telemetry.attitude:type_name -> JoystickControl.AttitudeData
	40, // 16: JoystickControl.Telemetry.battery:type_name -> JoystickControl.BatteryData
	39, // 17: JoystickControl.Telemetry.gps:type_name -> JoystickControl.GPSData
	33, // 18: JoystickControl.Telemetry.flight_mode:type_name -> JoystickControl.FlightModeData
	36, // 19: JoystickControl.Telemetry.sync:type_name -> JoystickControl.SyncData
	34, // 20: JoystickControl.Telemetry.link_tx:type_name -> JoystickControl.LinkTXData
	35, // 21: JoystickControl.Telemetry.link_rx:type_name -> JoystickControl.LinkRXData
	30, // 22: JoystickControl.Telemetry.barometer:type_name -> JoystickControl.BarometerData
	31, // 23: JoystickControl.Telemetry.variometer:type_name -> JoystickControl.VariometerData
	32, // 24: JoystickControl.Telemetry.barometer_variometer:type_name -> JoystickControl.BarometerVariometerData
	29, // 25: JoystickControl.Telemetry.device_info:type_name -> JoystickControl.CRSFDeviceInfoData
	28, // 26: JoystickControl.Telemetry.device_field_entry:type_name -> JoystickControl.CRSFDeviceFieldEntryData
	44, // 27: JoystickControl.Telemetry.device_field:type_name -> JoystickControl.CRSFDeviceFieldData
	27, // 28: JoystickControl.Telemetry.device_link_status:type_name -> JoystickControl.CRSFDeviceLinkStatusData
	5,  // 29: JoystickControl.CRSFDeviceLinkStatusData.flags:type_name -> JoystickControl.LinkStatusFlag
	3,  // 30: JoystickControl.CRSFDeviceFieldEntryData.data_type:type_name -> JoystickControl.CRSFDeviceFieldType
	29, // 31: JoystickControl.GetCRSFDevicesRes.devices:type_name -> JoystickControl.CRSFDeviceInfoData
	44, // 32: JoystickControl.GetCRSFDeviceFieldsRes.fields:type_name -> JoystickControl.CRSFDeviceFieldData
	45, // 33: JoystickControl.CRSFDeviceFieldData.uint8:type_name -> JoystickControl.CRSFDeviceFieldUint8
	46, // 34: JoystickControl.CRSFDeviceFieldData.int8:type_name -> JoystickControl.CRSFDeviceFieldInt8
	47, // 35: JoystickControl.CRSFDeviceFieldData.uint16:type_name -> JoystickControl.CRSFDeviceFieldUint16
	48, // 36: JoystickControl.CRSFDeviceFieldData.int16:type_name -> JoystickControl.CRSFDeviceFieldInt16
	49, // 37: JoystickControl.CRSFDeviceFieldData.uint32:type_name -> JoystickControl.CRSFDeviceFieldUint32
	50, // 38: JoystickControl.CRSFDeviceFieldData.int32:type_name -> JoystickControl.CRSFDeviceFieldInt32
	51, // 39: JoystickControl.CRSFDeviceFieldData.uint64:type_name -> JoystickControl.CRSFDeviceFieldUint64
	52, // 40: JoystickControl.CRSFDeviceFieldData.int64:type_name -> JoystickControl.CRSFDeviceFieldInt64
	53, // 41: JoystickControl.CRSFDeviceFieldData.float:type_name -> JoystickControl.CRSFDeviceFieldFloat
	58, // 42: JoystickControl.CRSFDeviceFieldData.text_select:type_name -> JoystickControl.CRSFDeviceFieldTextSelect
	55, // 43: JoystickControl.CRSFDeviceFieldData.string:type_name -> JoystickControl.CRSFDeviceFieldString
	56, // 44: JoystickControl.CRSFDeviceFieldData.folder:type_name -> JoystickControl.CRSFDeviceFieldFolder
	54, // 45: JoystickControl.CRSFDeviceFieldData.info:type_name -> JoystickControl.CRSFDeviceFieldInfo
	57, // 46: JoystickControl.CRSFDeviceFieldData.command:type_name -> JoystickControl.CRSFDeviceFieldCommand
	3,  // 47: JoystickControl.CRSFDeviceFieldUint8.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 48: JoystickControl.CRSFDeviceFieldInt8.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 49: JoystickControl.CRSFDeviceFieldUint16.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 50: JoystickControl.CRSFDeviceFieldInt16.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 51: JoystickControl.CRSFDeviceFieldUint32.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 52: JoystickControl.CRSFDeviceFieldInt32.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 53: JoystickControl.CRSFDeviceFieldUint64.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 54: JoystickControl.CRSFDeviceFieldInt64.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 55: JoystickControl.CRSFDeviceFieldFloat.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 56: JoystickControl.CRSFDeviceFieldInfo.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 57: JoystickControl.CRSFDeviceFieldString.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 58: JoystickControl.CRSFDeviceFieldFolder.type:type_name -> JoystickControl.CRSFDeviceFieldType
	3,  // 59: JoystickControl.CRSFDeviceFieldCommand.type:type_name -> JoystickControl.CRSFDeviceFieldType
	4,  // 60: JoystickControl.CRSFDeviceFieldCommand.step:type_name -> JoystickControl.CRSFDeviceFieldCommandStep
	3,  // 61: JoystickControl.CRSFDeviceFieldTextSelect.type:type_name -> JoystickControl.CRSFDeviceFieldType
	29, // 62: JoystickControl.GetCRSFDeviceFieldReq.device:type_name -> JoystickControl.CRSFDeviceInfoData
	29, // 63: JoystickControl.GetCRSFDeviceFieldsReq.device:type_name -> JoystickControl.CRSFDeviceInfoData
	44, // 64: JoystickControl.GetCRSFDeviceFieldRes.field:type_name -> JoystickControl.CRSFDeviceFieldData
	29, // 65: JoystickControl.SetCRSFDeviceFieldReq.device:type_name -> JoystickControl.CRSFDeviceInfoData
	44, // 66: JoystickControl.SetCRSFDeviceFieldReq.field:type_name -> JoystickControl.CRSFDeviceFieldData
	44, // 67: JoystickControl.SetCRSFDeviceFieldRes.field:type_name -> JoystickControl.CRSFDeviceFieldData
	27, // 68: JoystickControl.GetCRSFDeviceLinkStatusRes.link_status:type_name -> JoystickControl.CRSFDeviceLinkStatusData
	23, // 69: JoystickControl.EvalStates.StatesEntry.value:type_name -> JoystickControl.EvalState
	6,  // 70: JoystickControl.JoystickControl.getGamepads:input_type -> JoystickControl.Empty
	6,  // 71: JoystickControl.JoystickControl.getTransmitters:input_type -> JoystickControl.Empty
	6,  // 72: JoystickControl.JoystickControl.getConfig:input_type -> JoystickControl.Empty
	14, // 73: JoystickControl.JoystickControl.setConfig:input_type -> JoystickControl.SetConfigReq
	6,  // 74: JoystickControl.JoystickControl.validateConfig:input_type -> JoystickControl.Empty
	16, // 75: JoystickControl.JoystickControl.startLink:input_type -> JoystickControl.StartLinkReq
	6,  // 76: JoystickControl.JoystickControl.stopLink:input_type -> JoystickControl.Empty
	6,  // 77: JoystickControl.JoystickControl.startHTTP:input_type -> JoystickControl.Empty
	6,  // 78: JoystickControl.JoystickControl.stopHTTP:input_type -> JoystickControl.Empty
	6,  // 79: JoystickControl.JoystickControl.getLinkStream:input_type -> JoystickControl.Empty
	6,  // 80: JoystickControl.JoystickControl.getTelemetryStream:input_type -> JoystickControl.Empty
	6,  // 81: JoystickControl.JoystickControl.getEvalStream:input_type -> JoystickControl.Empty
	20, // 82: JoystickControl.JoystickControl.getTransmitterStream:input_type -> JoystickControl.GetTransmitterStreamReq
	17, // 83: JoystickControl.JoystickControl.getGamepadStream:input_type -> JoystickControl.GetGamepadStreamReq
	6,  // 84: JoystickControl.JoystickControl.getCRSFDevices:input_type -> JoystickControl.Empty
	60, // 85: JoystickControl.JoystickControl.getCRSFDeviceFields:input_type -> JoystickControl.GetCRSFDeviceFieldsReq
	59, // 86: JoystickControl.JoystickControl.getCRSFDeviceField:input_type -> JoystickControl.GetCRSFDeviceFieldReq
	62, // 87: JoystickControl.JoystickControl.setCRSFDeviceField:input_type -> JoystickControl.SetCRSFDeviceFieldReq
	6,  // 88: JoystickControl.JoystickControl.getCRSFDeviceLinkStatus:input_type -> JoystickControl.Empty
	6,  // 89: JoystickControl.JoystickControl.clearCRSFDeviceLinkCriticalFlags:input_type -> JoystickControl.Empty
	6,  // 90: JoystickControl.JoystickControl.getAppInfo:input_type -> JoystickControl.Empty
	11, // 91: JoystickControl.JoystickControl.getGamepads:output_type -> JoystickControl.GetGamepadsRes
	8,  // 92: JoystickControl.JoystickControl.getTransmitters:output_type -> JoystickControl.GetTransmitterRes
	13, // 93: JoystickControl.JoystickControl.getConfig:output_type -> JoystickControl.GetConfigRes
	6,  // 94: JoystickControl.JoystickControl.setConfig:output_type -> JoystickControl.Empty
	15, // 95: JoystickControl.JoystickControl.validateConfig:output_type -> JoystickControl.ValidateConfigRes
	6,  // 96: JoystickControl.JoystickControl.startLink:output_type -> JoystickControl.Empty
	6,  // 97: JoystickControl.JoystickControl.stopLink:output_type -> JoystickControl.Empty
	6,  // 98: JoystickControl.JoystickControl.startHTTP:output_type -> JoystickControl.Empty
	6,  // 99: JoystickControl.JoystickControl.stopHTTP:output_type -> JoystickControl.Empty
	25, // 100: JoystickControl.JoystickControl.getLinkStream:output_type -> JoystickControl.LinkState
	26, // 101: JoystickControl.JoystickControl.getTelemetryStream:output_type -> JoystickControl.Telemetry
	24, // 102: JoystickControl.JoystickControl.getEvalStream:output_type -> JoystickControl.EvalStates
	21, // 103: JoystickControl.JoystickControl.getTransmitterStream:output_type -> JoystickControl.TransmitterChannels
	19, // 104: JoystickControl.JoystickControl.getGamepadStream:output_type -> JoystickControl.GamepadInputsStates
	42, // 105: JoystickControl.JoystickControl.getCRSFDevices:output_type -> JoystickControl.GetCRSFDevicesRes
	43, // 106: JoystickControl.JoystickControl.getCRSFDeviceFields:output_type -> JoystickControl.GetCRSFDeviceFieldsRes
	61, // 107: JoystickControl.JoystickControl.getCRSFDeviceField:output_type -> JoystickControl.GetCRSFDeviceFieldRes
	63, // 108: JoystickControl.JoystickControl.setCRSFDeviceField:output_type -> JoystickControl.SetCRSFDeviceFieldRes
	64, // 109: JoystickControl.JoystickControl.getCRSFDeviceLinkStatus:output_type -> JoystickControl.GetCRSFDeviceLinkStatusRes
	6,  // 110: JoystickControl.JoystickControl.clearCRSFDeviceLinkCriticalFlags:output_type -> JoystickControl.Empty
	41, // 111: JoystickControl.JoystickControl.getAppInfo:output_type -> JoystickControl.GetAppInfoRes
	91, // [91:112] is the sub-list for method output_type
	70, // [70:91] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransmitterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transmitter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGamepadsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gamepad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGamepadStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamepadInputState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamepadInputsStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransmitterStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitterChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitterChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceLinkStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarometerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariometerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarometerVariometerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightModeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkTXData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkRXData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttitudeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDevicesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDeviceFieldsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldUint8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldInt8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldUint16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldInt16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldUint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldUint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRSFDeviceFieldTextSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDeviceFieldReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDeviceFieldsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDeviceFieldRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCRSFDeviceFieldReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCRSFDeviceFieldRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCRSFDeviceLinkStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Telemetry_LinkStats)(nil),
		(*Telemetry_Attitude)(nil),
		(*Telemetry_Battery)(nil),
		(*Telemetry_Gps)(nil),
		(*Telemetry_FlightMode)(nil),
		(*Telemetry_Sync)(nil),
		(*Telemetry_LinkTx)(nil),
		(*Telemetry_LinkRx)(nil),
		(*Telemetry_Barometer)(nil),
		(*Telemetry_Variometer)(nil),
		(*Telemetry_BarometerVariometer)(nil),
		(*Telemetry_DeviceInfo)(nil),
		(*Telemetry_DeviceFieldEntry)(nil),
		(*Telemetry_DeviceField)(nil),
		(*Telemetry_DeviceLinkStatus)(nil),
	}
	file_server_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*CRSFDeviceFieldData_Uint8)(nil),
		(*CRSFDeviceFieldData_Int8)(nil),
		(*CRSFDeviceFieldData_Uint16)(nil),
		(*CRSFDeviceFieldData_Int16)(nil),
		(*CRSFDeviceFieldData_Uint32)(nil),
		(*CRSFDeviceFieldData_Int32)(nil),
		(*CRSFDeviceFieldData_Uint64)(nil),
		(*CRSFDeviceFieldData_Int64)(nil),
		(*CRSFDeviceFieldData_Float)(nil),
		(*CRSFDeviceFieldData_TextSelect)(nil),
		(*CRSFDeviceFieldData_String_)(nil),
		(*CRSFDeviceFieldData_Folder)(nil),
		(*CRSFDeviceFieldData_Info)(nil),
		(*CRSFDeviceFieldData_Command)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}
