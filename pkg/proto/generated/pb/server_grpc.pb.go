// SPDX-FileCopyrightText: Â© 2023 OneEyeFPV oneeyefpv@gmail.com
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-License-Identifier: FS-0.9-or-later

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JoystickControl_GetGamepads_FullMethodName                      = "/JoystickControl.JoystickControl/getGamepads"
	JoystickControl_GetTransmitters_FullMethodName                  = "/JoystickControl.JoystickControl/getTransmitters"
	JoystickControl_GetConfig_FullMethodName                        = "/JoystickControl.JoystickControl/getConfig"
	JoystickControl_SetConfig_FullMethodName                        = "/JoystickControl.JoystickControl/setConfig"
	JoystickControl_ValidateConfig_FullMethodName                   = "/JoystickControl.JoystickControl/validateConfig"
	JoystickControl_StartLink_FullMethodName                        = "/JoystickControl.JoystickControl/startLink"
	JoystickControl_StopLink_FullMethodName                         = "/JoystickControl.JoystickControl/stopLink"
	JoystickControl_StartHTTP_FullMethodName                        = "/JoystickControl.JoystickControl/startHTTP"
	JoystickControl_StopHTTP_FullMethodName                         = "/JoystickControl.JoystickControl/stopHTTP"
	JoystickControl_GetLinkStream_FullMethodName                    = "/JoystickControl.JoystickControl/getLinkStream"
	JoystickControl_GetTelemetryStream_FullMethodName               = "/JoystickControl.JoystickControl/getTelemetryStream"
	JoystickControl_GetEvalStream_FullMethodName                    = "/JoystickControl.JoystickControl/getEvalStream"
	JoystickControl_GetTransmitterStream_FullMethodName             = "/JoystickControl.JoystickControl/getTransmitterStream"
	JoystickControl_GetGamepadStream_FullMethodName                 = "/JoystickControl.JoystickControl/getGamepadStream"
	JoystickControl_GetCRSFDevices_FullMethodName                   = "/JoystickControl.JoystickControl/getCRSFDevices"
	JoystickControl_GetCRSFDeviceFields_FullMethodName              = "/JoystickControl.JoystickControl/getCRSFDeviceFields"
	JoystickControl_GetCRSFDeviceField_FullMethodName               = "/JoystickControl.JoystickControl/getCRSFDeviceField"
	JoystickControl_SetCRSFDeviceField_FullMethodName               = "/JoystickControl.JoystickControl/setCRSFDeviceField"
	JoystickControl_GetCRSFDeviceLinkStatus_FullMethodName          = "/JoystickControl.JoystickControl/getCRSFDeviceLinkStatus"
	JoystickControl_ClearCRSFDeviceLinkCriticalFlags_FullMethodName = "/JoystickControl.JoystickControl/clearCRSFDeviceLinkCriticalFlags"
	JoystickControl_GetAppInfo_FullMethodName                       = "/JoystickControl.JoystickControl/getAppInfo"
)

// JoystickControlClient is the client API for JoystickControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoystickControlClient interface {
	GetGamepads(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGamepadsRes, error)
	GetTransmitters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransmitterRes, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigRes, error)
	SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*Empty, error)
	ValidateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidateConfigRes, error)
	StartLink(ctx context.Context, in *StartLinkReq, opts ...grpc.CallOption) (*Empty, error)
	StopLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetLinkStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetLinkStreamClient, error)
	GetTelemetryStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetTelemetryStreamClient, error)
	GetEvalStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetEvalStreamClient, error)
	GetTransmitterStream(ctx context.Context, in *GetTransmitterStreamReq, opts ...grpc.CallOption) (JoystickControl_GetTransmitterStreamClient, error)
	GetGamepadStream(ctx context.Context, in *GetGamepadStreamReq, opts ...grpc.CallOption) (JoystickControl_GetGamepadStreamClient, error)
	GetCRSFDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCRSFDevicesRes, error)
	GetCRSFDeviceFields(ctx context.Context, in *GetCRSFDeviceFieldsReq, opts ...grpc.CallOption) (*GetCRSFDeviceFieldsRes, error)
	GetCRSFDeviceField(ctx context.Context, in *GetCRSFDeviceFieldReq, opts ...grpc.CallOption) (*GetCRSFDeviceFieldRes, error)
	SetCRSFDeviceField(ctx context.Context, in *SetCRSFDeviceFieldReq, opts ...grpc.CallOption) (*SetCRSFDeviceFieldRes, error)
	GetCRSFDeviceLinkStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCRSFDeviceLinkStatusRes, error)
	ClearCRSFDeviceLinkCriticalFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetAppInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAppInfoRes, error)
}

type joystickControlClient struct {
	cc grpc.ClientConnInterface
}

func NewJoystickControlClient(cc grpc.ClientConnInterface) JoystickControlClient {
	return &joystickControlClient{cc}
}

func (c *joystickControlClient) GetGamepads(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGamepadsRes, error) {
	out := new(GetGamepadsRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetGamepads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetTransmitters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransmitterRes, error) {
	out := new(GetTransmitterRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetTransmitters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigRes, error) {
	out := new(GetConfigRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) ValidateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidateConfigRes, error) {
	out := new(ValidateConfigRes)
	err := c.cc.Invoke(ctx, JoystickControl_ValidateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StartLink(ctx context.Context, in *StartLinkReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StartLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StopLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StopLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StartHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StartHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StopHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StopHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetLinkStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetLinkStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoystickControl_ServiceDesc.Streams[0], JoystickControl_GetLinkStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joystickControlGetLinkStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JoystickControl_GetLinkStreamClient interface {
	Recv() (*LinkState, error)
	grpc.ClientStream
}

type joystickControlGetLinkStreamClient struct {
	grpc.ClientStream
}

func (x *joystickControlGetLinkStreamClient) Recv() (*LinkState, error) {
	m := new(LinkState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joystickControlClient) GetTelemetryStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetTelemetryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoystickControl_ServiceDesc.Streams[1], JoystickControl_GetTelemetryStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joystickControlGetTelemetryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JoystickControl_GetTelemetryStreamClient interface {
	Recv() (*Telemetry, error)
	grpc.ClientStream
}

type joystickControlGetTelemetryStreamClient struct {
	grpc.ClientStream
}

func (x *joystickControlGetTelemetryStreamClient) Recv() (*Telemetry, error) {
	m := new(Telemetry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joystickControlClient) GetEvalStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (JoystickControl_GetEvalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoystickControl_ServiceDesc.Streams[2], JoystickControl_GetEvalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joystickControlGetEvalStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JoystickControl_GetEvalStreamClient interface {
	Recv() (*EvalStates, error)
	grpc.ClientStream
}

type joystickControlGetEvalStreamClient struct {
	grpc.ClientStream
}

func (x *joystickControlGetEvalStreamClient) Recv() (*EvalStates, error) {
	m := new(EvalStates)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joystickControlClient) GetTransmitterStream(ctx context.Context, in *GetTransmitterStreamReq, opts ...grpc.CallOption) (JoystickControl_GetTransmitterStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoystickControl_ServiceDesc.Streams[3], JoystickControl_GetTransmitterStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joystickControlGetTransmitterStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JoystickControl_GetTransmitterStreamClient interface {
	Recv() (*TransmitterChannels, error)
	grpc.ClientStream
}

type joystickControlGetTransmitterStreamClient struct {
	grpc.ClientStream
}

func (x *joystickControlGetTransmitterStreamClient) Recv() (*TransmitterChannels, error) {
	m := new(TransmitterChannels)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joystickControlClient) GetGamepadStream(ctx context.Context, in *GetGamepadStreamReq, opts ...grpc.CallOption) (JoystickControl_GetGamepadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoystickControl_ServiceDesc.Streams[4], JoystickControl_GetGamepadStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joystickControlGetGamepadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JoystickControl_GetGamepadStreamClient interface {
	Recv() (*GamepadInputsStates, error)
	grpc.ClientStream
}

type joystickControlGetGamepadStreamClient struct {
	grpc.ClientStream
}

func (x *joystickControlGetGamepadStreamClient) Recv() (*GamepadInputsStates, error) {
	m := new(GamepadInputsStates)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joystickControlClient) GetCRSFDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCRSFDevicesRes, error) {
	out := new(GetCRSFDevicesRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetCRSFDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetCRSFDeviceFields(ctx context.Context, in *GetCRSFDeviceFieldsReq, opts ...grpc.CallOption) (*GetCRSFDeviceFieldsRes, error) {
	out := new(GetCRSFDeviceFieldsRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetCRSFDeviceFields_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetCRSFDeviceField(ctx context.Context, in *GetCRSFDeviceFieldReq, opts ...grpc.CallOption) (*GetCRSFDeviceFieldRes, error) {
	out := new(GetCRSFDeviceFieldRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetCRSFDeviceField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) SetCRSFDeviceField(ctx context.Context, in *SetCRSFDeviceFieldReq, opts ...grpc.CallOption) (*SetCRSFDeviceFieldRes, error) {
	out := new(SetCRSFDeviceFieldRes)
	err := c.cc.Invoke(ctx, JoystickControl_SetCRSFDeviceField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetCRSFDeviceLinkStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCRSFDeviceLinkStatusRes, error) {
	out := new(GetCRSFDeviceLinkStatusRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetCRSFDeviceLinkStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) ClearCRSFDeviceLinkCriticalFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_ClearCRSFDeviceLinkCriticalFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetAppInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAppInfoRes, error) {
	out := new(GetAppInfoRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetAppInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoystickControlServer is the server API for JoystickControl service.
// All implementations must embed UnimplementedJoystickControlServer
// for forward compatibility
type JoystickControlServer interface {
	GetGamepads(context.Context, *Empty) (*GetGamepadsRes, error)
	GetTransmitters(context.Context, *Empty) (*GetTransmitterRes, error)
	GetConfig(context.Context, *Empty) (*GetConfigRes, error)
	SetConfig(context.Context, *SetConfigReq) (*Empty, error)
	ValidateConfig(context.Context, *Empty) (*ValidateConfigRes, error)
	StartLink(context.Context, *StartLinkReq) (*Empty, error)
	StopLink(context.Context, *Empty) (*Empty, error)
	StartHTTP(context.Context, *Empty) (*Empty, error)
	StopHTTP(context.Context, *Empty) (*Empty, error)
	GetLinkStream(*Empty, JoystickControl_GetLinkStreamServer) error
	GetTelemetryStream(*Empty, JoystickControl_GetTelemetryStreamServer) error
	GetEvalStream(*Empty, JoystickControl_GetEvalStreamServer) error
	GetTransmitterStream(*GetTransmitterStreamReq, JoystickControl_GetTransmitterStreamServer) error
	GetGamepadStream(*GetGamepadStreamReq, JoystickControl_GetGamepadStreamServer) error
	GetCRSFDevices(context.Context, *Empty) (*GetCRSFDevicesRes, error)
	GetCRSFDeviceFields(context.Context, *GetCRSFDeviceFieldsReq) (*GetCRSFDeviceFieldsRes, error)
	GetCRSFDeviceField(context.Context, *GetCRSFDeviceFieldReq) (*GetCRSFDeviceFieldRes, error)
	SetCRSFDeviceField(context.Context, *SetCRSFDeviceFieldReq) (*SetCRSFDeviceFieldRes, error)
	GetCRSFDeviceLinkStatus(context.Context, *Empty) (*GetCRSFDeviceLinkStatusRes, error)
	ClearCRSFDeviceLinkCriticalFlags(context.Context, *Empty) (*Empty, error)
	GetAppInfo(context.Context, *Empty) (*GetAppInfoRes, error)
	mustEmbedUnimplementedJoystickControlServer()
}

// UnimplementedJoystickControlServer must be embedded to have forward compatible implementations.
type UnimplementedJoystickControlServer struct {
}

func (UnimplementedJoystickControlServer) GetGamepads(context.Context, *Empty) (*GetGamepadsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamepads not implemented")
}
func (UnimplementedJoystickControlServer) GetTransmitters(context.Context, *Empty) (*GetTransmitterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransmitters not implemented")
}
func (UnimplementedJoystickControlServer) GetConfig(context.Context, *Empty) (*GetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedJoystickControlServer) SetConfig(context.Context, *SetConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedJoystickControlServer) ValidateConfig(context.Context, *Empty) (*ValidateConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedJoystickControlServer) StartLink(context.Context, *StartLinkReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLink not implemented")
}
func (UnimplementedJoystickControlServer) StopLink(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLink not implemented")
}
func (UnimplementedJoystickControlServer) StartHTTP(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTP not implemented")
}
func (UnimplementedJoystickControlServer) StopHTTP(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopHTTP not implemented")
}
func (UnimplementedJoystickControlServer) GetLinkStream(*Empty, JoystickControl_GetLinkStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLinkStream not implemented")
}
func (UnimplementedJoystickControlServer) GetTelemetryStream(*Empty, JoystickControl_GetTelemetryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTelemetryStream not implemented")
}
func (UnimplementedJoystickControlServer) GetEvalStream(*Empty, JoystickControl_GetEvalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvalStream not implemented")
}
func (UnimplementedJoystickControlServer) GetTransmitterStream(*GetTransmitterStreamReq, JoystickControl_GetTransmitterStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransmitterStream not implemented")
}
func (UnimplementedJoystickControlServer) GetGamepadStream(*GetGamepadStreamReq, JoystickControl_GetGamepadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGamepadStream not implemented")
}
func (UnimplementedJoystickControlServer) GetCRSFDevices(context.Context, *Empty) (*GetCRSFDevicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRSFDevices not implemented")
}
func (UnimplementedJoystickControlServer) GetCRSFDeviceFields(context.Context, *GetCRSFDeviceFieldsReq) (*GetCRSFDeviceFieldsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRSFDeviceFields not implemented")
}
func (UnimplementedJoystickControlServer) GetCRSFDeviceField(context.Context, *GetCRSFDeviceFieldReq) (*GetCRSFDeviceFieldRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRSFDeviceField not implemented")
}
func (UnimplementedJoystickControlServer) SetCRSFDeviceField(context.Context, *SetCRSFDeviceFieldReq) (*SetCRSFDeviceFieldRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCRSFDeviceField not implemented")
}
func (UnimplementedJoystickControlServer) GetCRSFDeviceLinkStatus(context.Context, *Empty) (*GetCRSFDeviceLinkStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRSFDeviceLinkStatus not implemented")
}
func (UnimplementedJoystickControlServer) ClearCRSFDeviceLinkCriticalFlags(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCRSFDeviceLinkCriticalFlags not implemented")
}
func (UnimplementedJoystickControlServer) GetAppInfo(context.Context, *Empty) (*GetAppInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedJoystickControlServer) mustEmbedUnimplementedJoystickControlServer() {}

// UnsafeJoystickControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoystickControlServer will
// result in compilation errors.
type UnsafeJoystickControlServer interface {
	mustEmbedUnimplementedJoystickControlServer()
}

func RegisterJoystickControlServer(s grpc.ServiceRegistrar, srv JoystickControlServer) {
	s.RegisterService(&JoystickControl_ServiceDesc, srv)
}

func _JoystickControl_GetGamepads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetGamepads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetGamepads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetGamepads(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetTransmitters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetTransmitters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetTransmitters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetTransmitters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).SetConfig(ctx, req.(*SetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).ValidateConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StartLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StartLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StartLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StartLink(ctx, req.(*StartLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StopLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StopLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StopLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StopLink(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StartHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StartHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StartHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StartHTTP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StopHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StopHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StopHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StopHTTP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetLinkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoystickControlServer).GetLinkStream(m, &joystickControlGetLinkStreamServer{stream})
}

type JoystickControl_GetLinkStreamServer interface {
	Send(*LinkState) error
	grpc.ServerStream
}

type joystickControlGetLinkStreamServer struct {
	grpc.ServerStream
}

func (x *joystickControlGetLinkStreamServer) Send(m *LinkState) error {
	return x.ServerStream.SendMsg(m)
}

func _JoystickControl_GetTelemetryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoystickControlServer).GetTelemetryStream(m, &joystickControlGetTelemetryStreamServer{stream})
}

type JoystickControl_GetTelemetryStreamServer interface {
	Send(*Telemetry) error
	grpc.ServerStream
}

type joystickControlGetTelemetryStreamServer struct {
	grpc.ServerStream
}

func (x *joystickControlGetTelemetryStreamServer) Send(m *Telemetry) error {
	return x.ServerStream.SendMsg(m)
}

func _JoystickControl_GetEvalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoystickControlServer).GetEvalStream(m, &joystickControlGetEvalStreamServer{stream})
}

type JoystickControl_GetEvalStreamServer interface {
	Send(*EvalStates) error
	grpc.ServerStream
}

type joystickControlGetEvalStreamServer struct {
	grpc.ServerStream
}

func (x *joystickControlGetEvalStreamServer) Send(m *EvalStates) error {
	return x.ServerStream.SendMsg(m)
}

func _JoystickControl_GetTransmitterStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransmitterStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoystickControlServer).GetTransmitterStream(m, &joystickControlGetTransmitterStreamServer{stream})
}

type JoystickControl_GetTransmitterStreamServer interface {
	Send(*TransmitterChannels) error
	grpc.ServerStream
}

type joystickControlGetTransmitterStreamServer struct {
	grpc.ServerStream
}

func (x *joystickControlGetTransmitterStreamServer) Send(m *TransmitterChannels) error {
	return x.ServerStream.SendMsg(m)
}

func _JoystickControl_GetGamepadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetGamepadStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoystickControlServer).GetGamepadStream(m, &joystickControlGetGamepadStreamServer{stream})
}

type JoystickControl_GetGamepadStreamServer interface {
	Send(*GamepadInputsStates) error
	grpc.ServerStream
}

type joystickControlGetGamepadStreamServer struct {
	grpc.ServerStream
}

func (x *joystickControlGetGamepadStreamServer) Send(m *GamepadInputsStates) error {
	return x.ServerStream.SendMsg(m)
}

func _JoystickControl_GetCRSFDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetCRSFDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetCRSFDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetCRSFDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetCRSFDeviceFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCRSFDeviceFieldsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetCRSFDeviceFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetCRSFDeviceFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetCRSFDeviceFields(ctx, req.(*GetCRSFDeviceFieldsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetCRSFDeviceField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCRSFDeviceFieldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetCRSFDeviceField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetCRSFDeviceField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetCRSFDeviceField(ctx, req.(*GetCRSFDeviceFieldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_SetCRSFDeviceField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCRSFDeviceFieldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).SetCRSFDeviceField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_SetCRSFDeviceField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).SetCRSFDeviceField(ctx, req.(*SetCRSFDeviceFieldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetCRSFDeviceLinkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetCRSFDeviceLinkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetCRSFDeviceLinkStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetCRSFDeviceLinkStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_ClearCRSFDeviceLinkCriticalFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).ClearCRSFDeviceLinkCriticalFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_ClearCRSFDeviceLinkCriticalFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).ClearCRSFDeviceLinkCriticalFlags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetAppInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// JoystickControl_ServiceDesc is the grpc.ServiceDesc for JoystickControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoystickControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JoystickControl.JoystickControl",
	HandlerType: (*JoystickControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGamepads",
			Handler:    _JoystickControl_GetGamepads_Handler,
		},
		{
			MethodName: "getTransmitters",
			Handler:    _JoystickControl_GetTransmitters_Handler,
		},
		{
			MethodName: "getConfig",
			Handler:    _JoystickControl_GetConfig_Handler,
		},
		{
			MethodName: "setConfig",
			Handler:    _JoystickControl_SetConfig_Handler,
		},
		{
			MethodName: "validateConfig",
			Handler:    _JoystickControl_ValidateConfig_Handler,
		},
		{
			MethodName: "startLink",
			Handler:    _JoystickControl_StartLink_Handler,
		},
		{
			MethodName: "stopLink",
			Handler:    _JoystickControl_StopLink_Handler,
		},
		{
			MethodName: "startHTTP",
			Handler:    _JoystickControl_StartHTTP_Handler,
		},
		{
			MethodName: "stopHTTP",
			Handler:    _JoystickControl_StopHTTP_Handler,
		},
		{
			MethodName: "getCRSFDevices",
			Handler:    _JoystickControl_GetCRSFDevices_Handler,
		},
		{
			MethodName: "getCRSFDeviceFields",
			Handler:    _JoystickControl_GetCRSFDeviceFields_Handler,
		},
		{
			MethodName: "getCRSFDeviceField",
			Handler:    _JoystickControl_GetCRSFDeviceField_Handler,
		},
		{
			MethodName: "setCRSFDeviceField",
			Handler:    _JoystickControl_SetCRSFDeviceField_Handler,
		},
		{
			MethodName: "getCRSFDeviceLinkStatus",
			Handler:    _JoystickControl_GetCRSFDeviceLinkStatus_Handler,
		},
		{
			MethodName: "clearCRSFDeviceLinkCriticalFlags",
			Handler:    _JoystickControl_ClearCRSFDeviceLinkCriticalFlags_Handler,
		},
		{
			MethodName: "getAppInfo",
			Handler:    _JoystickControl_GetAppInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getLinkStream",
			Handler:       _JoystickControl_GetLinkStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getTelemetryStream",
			Handler:       _JoystickControl_GetTelemetryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getEvalStream",
			Handler:       _JoystickControl_GetEvalStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getTransmitterStream",
			Handler:       _JoystickControl_GetTransmitterStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGamepadStream",
			Handler:       _JoystickControl_GetGamepadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
