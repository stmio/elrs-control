/**
 * @fileoverview gRPC-Web generated client stub for JoystickControl
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.2
// source: server.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js')
const proto = {};
proto.JoystickControl = require('./server_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.JoystickControl.JoystickControlClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.JoystickControl.JoystickControlPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetGamepadsRes>}
 */
const methodDescriptor_JoystickControl_getGamepads = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getGamepads',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetGamepadsRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetGamepadsRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetGamepadsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetGamepadsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getGamepads =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getGamepads',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getGamepads,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetGamepadsRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getGamepads =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getGamepads',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getGamepads);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetTransmitterRes>}
 */
const methodDescriptor_JoystickControl_getTransmitters = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getTransmitters',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetTransmitterRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetTransmitterRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetTransmitterRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetTransmitterRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getTransmitters =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getTransmitters',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTransmitters,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetTransmitterRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getTransmitters =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getTransmitters',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTransmitters);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetConfigRes>}
 */
const methodDescriptor_JoystickControl_getConfig = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getConfig',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetConfigRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetConfigRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetConfigRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetConfigRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getConfig,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetConfigRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.SetConfigReq,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_setConfig = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/setConfig',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.SetConfigReq,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.SetConfigReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.SetConfigReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.setConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/setConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_setConfig,
      callback);
};


/**
 * @param {!proto.JoystickControl.SetConfigReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.setConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/setConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_setConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.ValidateConfigRes>}
 */
const methodDescriptor_JoystickControl_validateConfig = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/validateConfig',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.ValidateConfigRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.ValidateConfigRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.ValidateConfigRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.ValidateConfigRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.validateConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/validateConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_validateConfig,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.ValidateConfigRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.validateConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/validateConfig',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_validateConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.StartLinkReq,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_startLink = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/startLink',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.StartLinkReq,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.StartLinkReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.StartLinkReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.startLink =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/startLink',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_startLink,
      callback);
};


/**
 * @param {!proto.JoystickControl.StartLinkReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.startLink =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/startLink',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_startLink);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_stopLink = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/stopLink',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.stopLink =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/stopLink',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_stopLink,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.stopLink =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/stopLink',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_stopLink);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_startHTTP = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/startHTTP',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.startHTTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/startHTTP',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_startHTTP,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.startHTTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/startHTTP',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_startHTTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_stopHTTP = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/stopHTTP',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.stopHTTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/stopHTTP',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_stopHTTP,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.stopHTTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/stopHTTP',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_stopHTTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.LinkState>}
 */
const methodDescriptor_JoystickControl_getLinkStream = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getLinkStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.JoystickControl.Empty,
  proto.JoystickControl.LinkState,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.LinkState.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.LinkState>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getLinkStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getLinkStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getLinkStream);
};


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.LinkState>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getLinkStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getLinkStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getLinkStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.Telemetry>}
 */
const methodDescriptor_JoystickControl_getTelemetryStream = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getTelemetryStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.JoystickControl.Empty,
  proto.JoystickControl.Telemetry,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Telemetry.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Telemetry>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getTelemetryStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getTelemetryStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTelemetryStream);
};


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Telemetry>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getTelemetryStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getTelemetryStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTelemetryStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.EvalStates>}
 */
const methodDescriptor_JoystickControl_getEvalStream = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getEvalStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.JoystickControl.Empty,
  proto.JoystickControl.EvalStates,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.EvalStates.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.EvalStates>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getEvalStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getEvalStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getEvalStream);
};


/**
 * @param {!proto.JoystickControl.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.EvalStates>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getEvalStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getEvalStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getEvalStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.GetTransmitterStreamReq,
 *   !proto.JoystickControl.TransmitterChannels>}
 */
const methodDescriptor_JoystickControl_getTransmitterStream = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getTransmitterStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.JoystickControl.GetTransmitterStreamReq,
  proto.JoystickControl.TransmitterChannels,
  /**
   * @param {!proto.JoystickControl.GetTransmitterStreamReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.TransmitterChannels.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.GetTransmitterStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.TransmitterChannels>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getTransmitterStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getTransmitterStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTransmitterStream);
};


/**
 * @param {!proto.JoystickControl.GetTransmitterStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.TransmitterChannels>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getTransmitterStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getTransmitterStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getTransmitterStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.GetGamepadStreamReq,
 *   !proto.JoystickControl.GamepadInputsStates>}
 */
const methodDescriptor_JoystickControl_getGamepadStream = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getGamepadStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.JoystickControl.GetGamepadStreamReq,
  proto.JoystickControl.GamepadInputsStates,
  /**
   * @param {!proto.JoystickControl.GetGamepadStreamReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GamepadInputsStates.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.GetGamepadStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GamepadInputsStates>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getGamepadStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getGamepadStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getGamepadStream);
};


/**
 * @param {!proto.JoystickControl.GetGamepadStreamReq} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GamepadInputsStates>}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getGamepadStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/JoystickControl.JoystickControl/getGamepadStream',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getGamepadStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetCRSFDevicesRes>}
 */
const methodDescriptor_JoystickControl_getCRSFDevices = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getCRSFDevices',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetCRSFDevicesRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetCRSFDevicesRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetCRSFDevicesRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetCRSFDevicesRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getCRSFDevices =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDevices',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDevices,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetCRSFDevicesRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getCRSFDevices =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDevices',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDevices);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.GetCRSFDeviceFieldsReq,
 *   !proto.JoystickControl.GetCRSFDeviceFieldsRes>}
 */
const methodDescriptor_JoystickControl_getCRSFDeviceFields = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getCRSFDeviceFields',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.GetCRSFDeviceFieldsReq,
  proto.JoystickControl.GetCRSFDeviceFieldsRes,
  /**
   * @param {!proto.JoystickControl.GetCRSFDeviceFieldsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetCRSFDeviceFieldsRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.GetCRSFDeviceFieldsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetCRSFDeviceFieldsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetCRSFDeviceFieldsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getCRSFDeviceFields =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceFields',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceFields,
      callback);
};


/**
 * @param {!proto.JoystickControl.GetCRSFDeviceFieldsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetCRSFDeviceFieldsRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getCRSFDeviceFields =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceFields',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceFields);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.GetCRSFDeviceFieldReq,
 *   !proto.JoystickControl.GetCRSFDeviceFieldRes>}
 */
const methodDescriptor_JoystickControl_getCRSFDeviceField = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getCRSFDeviceField',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.GetCRSFDeviceFieldReq,
  proto.JoystickControl.GetCRSFDeviceFieldRes,
  /**
   * @param {!proto.JoystickControl.GetCRSFDeviceFieldReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetCRSFDeviceFieldRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.GetCRSFDeviceFieldReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetCRSFDeviceFieldRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetCRSFDeviceFieldRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getCRSFDeviceField =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceField',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceField,
      callback);
};


/**
 * @param {!proto.JoystickControl.GetCRSFDeviceFieldReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetCRSFDeviceFieldRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getCRSFDeviceField =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceField',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceField);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.SetCRSFDeviceFieldReq,
 *   !proto.JoystickControl.SetCRSFDeviceFieldRes>}
 */
const methodDescriptor_JoystickControl_setCRSFDeviceField = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/setCRSFDeviceField',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.SetCRSFDeviceFieldReq,
  proto.JoystickControl.SetCRSFDeviceFieldRes,
  /**
   * @param {!proto.JoystickControl.SetCRSFDeviceFieldReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.SetCRSFDeviceFieldRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.SetCRSFDeviceFieldReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.SetCRSFDeviceFieldRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.SetCRSFDeviceFieldRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.setCRSFDeviceField =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/setCRSFDeviceField',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_setCRSFDeviceField,
      callback);
};


/**
 * @param {!proto.JoystickControl.SetCRSFDeviceFieldReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.SetCRSFDeviceFieldRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.setCRSFDeviceField =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/setCRSFDeviceField',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_setCRSFDeviceField);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetCRSFDeviceLinkStatusRes>}
 */
const methodDescriptor_JoystickControl_getCRSFDeviceLinkStatus = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getCRSFDeviceLinkStatus',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetCRSFDeviceLinkStatusRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetCRSFDeviceLinkStatusRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetCRSFDeviceLinkStatusRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetCRSFDeviceLinkStatusRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getCRSFDeviceLinkStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceLinkStatus',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceLinkStatus,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetCRSFDeviceLinkStatusRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getCRSFDeviceLinkStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getCRSFDeviceLinkStatus',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getCRSFDeviceLinkStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.Empty>}
 */
const methodDescriptor_JoystickControl_clearCRSFDeviceLinkCriticalFlags = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/clearCRSFDeviceLinkCriticalFlags',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.Empty,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.Empty.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.clearCRSFDeviceLinkCriticalFlags =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/clearCRSFDeviceLinkCriticalFlags',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_clearCRSFDeviceLinkCriticalFlags,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.Empty>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.clearCRSFDeviceLinkCriticalFlags =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/clearCRSFDeviceLinkCriticalFlags',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_clearCRSFDeviceLinkCriticalFlags);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.JoystickControl.Empty,
 *   !proto.JoystickControl.GetAppInfoRes>}
 */
const methodDescriptor_JoystickControl_getAppInfo = new grpc.web.MethodDescriptor(
  '/JoystickControl.JoystickControl/getAppInfo',
  grpc.web.MethodType.UNARY,
  proto.JoystickControl.Empty,
  proto.JoystickControl.GetAppInfoRes,
  /**
   * @param {!proto.JoystickControl.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.JoystickControl.GetAppInfoRes.deserializeBinary
);


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.JoystickControl.GetAppInfoRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.JoystickControl.GetAppInfoRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JoystickControl.JoystickControlClient.prototype.getAppInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getAppInfo',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getAppInfo,
      callback);
};


/**
 * @param {!proto.JoystickControl.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.JoystickControl.GetAppInfoRes>}
 *     Promise that resolves to the response
 */
proto.JoystickControl.JoystickControlPromiseClient.prototype.getAppInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/JoystickControl.JoystickControl/getAppInfo',
      request,
      metadata || {},
      methodDescriptor_JoystickControl_getAppInfo);
};


module.exports = proto.JoystickControl;

